
Wei_Huang_Lab2_sourcecode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000120  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000174  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001a4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000093b  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007e5  00000000  00000000  00000b3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000031b  00000000  00000000  00001320  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000163c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000445  00000000  00000000  00001660  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000120  00000000  00000000  00001aa5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001bc5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	40 c0       	rjmp	.+128    	; 0x11c <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:
#include <util/delay.h>
#include <stdio.h>

int main(void)
{
	DDRB  = 0b11110000;      // configure Port B pins for input/output
  9e:	80 ef       	ldi	r24, 0xF0	; 240
  a0:	87 bb       	out	0x17, r24	; 23
	PORTB = 0b11110000;     // set initial value for Port B outputs
  a2:	88 bb       	out	0x18, r24	; 24
	// (initially, disable both motors)
	DDRD  = 0b00000000;      // configure Port D pins for input
  a4:	11 ba       	out	0x11, r1	; 17
	PORTD = 0b00000011;		// set initial value for Port D inputs
  a6:	83 e0       	ldi	r24, 0x03	; 3
  a8:	82 bb       	out	0x12, r24	; 18
	while (1) { // loop forever
		PORTB = 0b01100000;     // make TekBot move forward
  aa:	90 e6       	ldi	r25, 0x60	; 96
					
		}
		else if(PIND == 0b11111110 || PIND == 0b11111100 ){	//right whisker or both hit
			PORTB = 0b00000000;     // move backward
			_delay_ms(1000);        // wait for 1 s
			PORTB = 0b00100000;     // turn left
  ac:	30 e2       	ldi	r19, 0x20	; 32
			_delay_ms(1000);        // wait for 1 s
			PORTB = 0b01000000;     // turn right
  ae:	20 e4       	ldi	r18, 0x40	; 64
	PORTB = 0b11110000;     // set initial value for Port B outputs
	// (initially, disable both motors)
	DDRD  = 0b00000000;      // configure Port D pins for input
	PORTD = 0b00000011;		// set initial value for Port D inputs
	while (1) { // loop forever
		PORTB = 0b01100000;     // make TekBot move forward
  b0:	98 bb       	out	0x18, r25	; 24
		if(PIND == 0b11111101){	//Left whisker  hit
  b2:	80 b3       	in	r24, 0x10	; 16
  b4:	8d 3f       	cpi	r24, 0xFD	; 253
  b6:	b1 f4       	brne	.+44     	; 0xe4 <main+0x46>
			PORTB = 0b00000000;     // move backward
  b8:	18 ba       	out	0x18, r1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ba:	4f ef       	ldi	r20, 0xFF	; 255
  bc:	53 ed       	ldi	r21, 0xD3	; 211
  be:	80 e3       	ldi	r24, 0x30	; 48
  c0:	41 50       	subi	r20, 0x01	; 1
  c2:	50 40       	sbci	r21, 0x00	; 0
  c4:	80 40       	sbci	r24, 0x00	; 0
  c6:	e1 f7       	brne	.-8      	; 0xc0 <main+0x22>
  c8:	00 c0       	rjmp	.+0      	; 0xca <main+0x2c>
  ca:	00 00       	nop
			_delay_ms(1000);        // wait for 1 s
			PORTB = 0b01000000;     // turn Right
  cc:	28 bb       	out	0x18, r18	; 24
  ce:	4f ef       	ldi	r20, 0xFF	; 255
  d0:	53 ed       	ldi	r21, 0xD3	; 211
  d2:	80 e3       	ldi	r24, 0x30	; 48
  d4:	41 50       	subi	r20, 0x01	; 1
  d6:	50 40       	sbci	r21, 0x00	; 0
  d8:	80 40       	sbci	r24, 0x00	; 0
  da:	e1 f7       	brne	.-8      	; 0xd4 <main+0x36>
  dc:	00 c0       	rjmp	.+0      	; 0xde <main+0x40>
  de:	00 00       	nop
			_delay_ms(1000);        // wait for 1 s
			PORTB = 0b00100000;     // turn Left
  e0:	38 bb       	out	0x18, r19	; 24
  e2:	e6 cf       	rjmp	.-52     	; 0xb0 <main+0x12>
					
		}
		else if(PIND == 0b11111110 || PIND == 0b11111100 ){	//right whisker or both hit
  e4:	80 b3       	in	r24, 0x10	; 16
  e6:	8e 3f       	cpi	r24, 0xFE	; 254
  e8:	19 f0       	breq	.+6      	; 0xf0 <main+0x52>
  ea:	80 b3       	in	r24, 0x10	; 16
  ec:	8c 3f       	cpi	r24, 0xFC	; 252
  ee:	01 f7       	brne	.-64     	; 0xb0 <main+0x12>
			PORTB = 0b00000000;     // move backward
  f0:	18 ba       	out	0x18, r1	; 24
  f2:	4f ef       	ldi	r20, 0xFF	; 255
  f4:	53 ed       	ldi	r21, 0xD3	; 211
  f6:	80 e3       	ldi	r24, 0x30	; 48
  f8:	41 50       	subi	r20, 0x01	; 1
  fa:	50 40       	sbci	r21, 0x00	; 0
  fc:	80 40       	sbci	r24, 0x00	; 0
  fe:	e1 f7       	brne	.-8      	; 0xf8 <main+0x5a>
 100:	00 c0       	rjmp	.+0      	; 0x102 <main+0x64>
 102:	00 00       	nop
			_delay_ms(1000);        // wait for 1 s
			PORTB = 0b00100000;     // turn left
 104:	38 bb       	out	0x18, r19	; 24
 106:	4f ef       	ldi	r20, 0xFF	; 255
 108:	53 ed       	ldi	r21, 0xD3	; 211
 10a:	80 e3       	ldi	r24, 0x30	; 48
 10c:	41 50       	subi	r20, 0x01	; 1
 10e:	50 40       	sbci	r21, 0x00	; 0
 110:	80 40       	sbci	r24, 0x00	; 0
 112:	e1 f7       	brne	.-8      	; 0x10c <main+0x6e>
 114:	00 c0       	rjmp	.+0      	; 0x116 <main+0x78>
 116:	00 00       	nop
			_delay_ms(1000);        // wait for 1 s
			PORTB = 0b01000000;     // turn right
 118:	28 bb       	out	0x18, r18	; 24
 11a:	ca cf       	rjmp	.-108    	; 0xb0 <main+0x12>

0000011c <_exit>:
 11c:	f8 94       	cli

0000011e <__stop_program>:
 11e:	ff cf       	rjmp	.-2      	; 0x11e <__stop_program>
