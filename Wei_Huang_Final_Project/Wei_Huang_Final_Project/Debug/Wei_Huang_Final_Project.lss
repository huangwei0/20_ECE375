
AVRASM ver. 2.2.7  C:\Users\Huang Wei\Documents\Atmel Studio\7.0\Wei_Huang_Final_Project\Wei_Huang_Final_Project\Wei_Huang_Final_Project.asm Thu Dec 10 19:17:21 2020

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.3.300\avrasm\inc\m128def.inc'
C:\Users\Huang Wei\Documents\Atmel Studio\7.0\Wei_Huang_Final_Project\Wei_Huang_Final_Project\Wei_Huang_Final_Project.asm(15): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.3.300\avrasm\inc\m128def.inc'
C:\Users\Huang Wei\Documents\Atmel Studio\7.0\Wei_Huang_Final_Project\Wei_Huang_Final_Project\Wei_Huang_Final_Project.asm(1421): Including file 'C:\Users\Huang Wei\Documents\Atmel Studio\7.0\Wei_Huang_Final_Project\Wei_Huang_Final_Project\LCDDriver.asm'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.3.300\avrasm\inc\m128def.inc'
C:\Users\Huang Wei\Documents\Atmel Studio\7.0\Wei_Huang_Final_Project\Wei_Huang_Final_Project\Wei_Huang_Final_Project.asm(15): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.3.300\avrasm\inc\m128def.inc'
C:\Users\Huang Wei\Documents\Atmel Studio\7.0\Wei_Huang_Final_Project\Wei_Huang_Final_Project\Wei_Huang_Final_Project.asm(1421): Including file 'C:\Users\Huang Wei\Documents\Atmel Studio\7.0\Wei_Huang_Final_Project\Wei_Huang_Final_Project\LCDDriver.asm'
                                 
                                 ;***********************************************************
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega128.xml ***********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m128def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega128
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega128
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M128DEF_INC_
                                 #define _M128DEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega128
                                 #pragma AVRPART ADMIN PART_NAME ATmega128
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x97
                                 .equ	SIGNATURE_002	= 0x02
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UCSR1C	= 0x9d	; MEMORY MAPPED
                                 .equ	UDR1	= 0x9c	; MEMORY MAPPED
                                 .equ	UCSR1A	= 0x9b	; MEMORY MAPPED
                                 .equ	UCSR1B	= 0x9a	; MEMORY MAPPED
                                 .equ	UBRR1H	= 0x98	; MEMORY MAPPED
                                 .equ	UBRR1L	= 0x99	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0x95	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0x90	; MEMORY MAPPED
                                 .equ	TCCR3C	= 0x8c	; MEMORY MAPPED
                                 .equ	TCCR3A	= 0x8b	; MEMORY MAPPED
                                 .equ	TCCR3B	= 0x8a	; MEMORY MAPPED
                                 .equ	TCNT3L	= 0x88	; MEMORY MAPPED
                                 .equ	TCNT3H	= 0x89	; MEMORY MAPPED
                                 .equ	OCR3AL	= 0x86	; MEMORY MAPPED
                                 .equ	OCR3AH	= 0x87	; MEMORY MAPPED
                                 .equ	OCR3BL	= 0x84	; MEMORY MAPPED
                                 .equ	OCR3BH	= 0x85	; MEMORY MAPPED
                                 .equ	OCR3CL	= 0x82	; MEMORY MAPPED
                                 .equ	OCR3CH	= 0x83	; MEMORY MAPPED
                                 .equ	ICR3L	= 0x80	; MEMORY MAPPED
                                 .equ	ICR3H	= 0x81	; MEMORY MAPPED
                                 .equ	ETIMSK	= 0x7d	; MEMORY MAPPED
                                 .equ	ETIFR	= 0x7c	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x7a	; MEMORY MAPPED
                                 .equ	OCR1CL	= 0x78	; MEMORY MAPPED
                                 .equ	OCR1CH	= 0x79	; MEMORY MAPPED
                                 .equ	TWCR	= 0x74	; MEMORY MAPPED
                                 .equ	TWDR	= 0x73	; MEMORY MAPPED
                                 .equ	TWAR	= 0x72	; MEMORY MAPPED
                                 .equ	TWSR	= 0x71	; MEMORY MAPPED
                                 .equ	TWBR	= 0x70	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x6f	; MEMORY MAPPED
                                 .equ	XMCRA	= 0x6d	; MEMORY MAPPED
                                 .equ	XMCRB	= 0x6c	; MEMORY MAPPED
                                 .equ	EICRA	= 0x6a	; MEMORY MAPPED
                                 .equ	SPMCSR	= 0x68	; MEMORY MAPPED
                                 .equ	PORTG	= 0x65	; MEMORY MAPPED
                                 .equ	DDRG	= 0x64	; MEMORY MAPPED
                                 .equ	PING	= 0x63	; MEMORY MAPPED
                                 .equ	PORTF	= 0x62	; MEMORY MAPPED
                                 .equ	DDRF	= 0x61	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	XDIV	= 0x3c
                                 .equ	RAMPZ	= 0x3b
                                 .equ	EICRB	= 0x3a
                                 .equ	EIMSK	= 0x39
                                 .equ	EIFR	= 0x38
                                 .equ	TIMSK	= 0x37
                                 .equ	TIFR	= 0x36
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUCSR	= 0x34
                                 .equ	TCCR0	= 0x33
                                 .equ	TCNT0	= 0x32
                                 .equ	OCR0	= 0x31
                                 .equ	ASSR	= 0x30
                                 .equ	TCCR1A	= 0x2f
                                 .equ	TCCR1B	= 0x2e
                                 .equ	TCNT1L	= 0x2c
                                 .equ	TCNT1H	= 0x2d
                                 .equ	OCR1AL	= 0x2a
                                 .equ	OCR1AH	= 0x2b
                                 .equ	OCR1BL	= 0x28
                                 .equ	OCR1BH	= 0x29
                                 .equ	ICR1L	= 0x26
                                 .equ	ICR1H	= 0x27
                                 .equ	TCCR2	= 0x25
                                 .equ	TCNT2	= 0x24
                                 .equ	OCR2	= 0x23
                                 .equ	OCDR	= 0x22
                                 .equ	WDTCR	= 0x21
                                 .equ	SFIOR	= 0x20
                                 .equ	EEARL	= 0x1e
                                 .equ	EEARH	= 0x1f
                                 .equ	EEDR	= 0x1d
                                 .equ	EECR	= 0x1c
                                 .equ	PORTA	= 0x1b
                                 .equ	DDRA	= 0x1a
                                 .equ	PINA	= 0x19
                                 .equ	PORTB	= 0x18
                                 .equ	DDRB	= 0x17
                                 .equ	PINB	= 0x16
                                 .equ	PORTC	= 0x15
                                 .equ	DDRC	= 0x14
                                 .equ	PINC	= 0x13
                                 .equ	PORTD	= 0x12
                                 .equ	DDRD	= 0x11
                                 .equ	PIND	= 0x10
                                 .equ	SPDR	= 0x0f
                                 .equ	SPSR	= 0x0e
                                 .equ	SPCR	= 0x0d
                                 .equ	UDR0	= 0x0c
                                 .equ	UCSR0A	= 0x0b
                                 .equ	UCSR0B	= 0x0a
                                 .equ	UBRR0L	= 0x09
                                 .equ	ACSR	= 0x08
                                 .equ	ADMUX	= 0x07
                                 .equ	ADCSRA	= 0x06
                                 .equ	ADCH	= 0x05
                                 .equ	ADCL	= 0x04
                                 .equ	PORTE	= 0x03
                                 .equ	DDRE	= 0x02
                                 .equ	PINE	= 0x01
                                 .equ	PINF	= 0x00
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; SFIOR - Special Function IO Register
                                 .equ	ACME	= 3	; Analog Comparator Multiplexer Enable
                                 
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWBR - TWI Bit Rate register
                                 .equ	I2BR	= TWBR	; For compatibility
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	I2CR	= TWCR	; For compatibility
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	I2IE	= TWIE	; For compatibility
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	I2EN	= TWEN	; For compatibility
                                 .equ	ENI2C	= TWEN	; For compatibility
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	I2WC	= TWWC	; For compatibility
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	I2STO	= TWSTO	; For compatibility
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	I2STA	= TWSTA	; For compatibility
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	I2EA	= TWEA	; For compatibility
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 .equ	I2INT	= TWINT	; For compatibility
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	I2SR	= TWSR	; For compatibility
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWS0	= TWPS0	; For compatibility
                                 .equ	I2GCE	= TWPS0	; For compatibility
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS1	= TWPS1	; For compatibility
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	I2S3	= TWS3	; For compatibility
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	I2S4	= TWS4	; For compatibility
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	I2S5	= TWS5	; For compatibility
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	I2S6	= TWS6	; For compatibility
                                 .equ	TWS7	= 7	; TWI Status
                                 .equ	I2S7	= TWS7	; For compatibility
                                 
                                 ; TWDR - TWI Data register
                                 .equ	I2DR	= TWDR	; For compatibility
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	I2AR	= TWAR	; For compatibility
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR00	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR01	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR02	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR03	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR04	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR05	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR06	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR07	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	UCSZ2	= UCSZ02	; For compatibility
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL0	= 6	; USART Mode Select
                                 
                                 ; UBRR0H - USART Baud Rate Register Hight Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** USART1 ***********************
                                 ; UDR1 - USART I/O Data Register
                                 .equ	UDR10	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR11	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR12	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR13	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR14	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR15	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR16	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR17	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR1A - USART Control and Status Register A
                                 .equ	MPCM1	= 0	; Multi-processor Communication Mode
                                 .equ	U2X1	= 1	; Double the USART transmission speed
                                 .equ	UPE1	= 2	; Parity Error
                                 .equ	DOR1	= 3	; Data overRun
                                 .equ	FE1	= 4	; Framing Error
                                 .equ	UDRE1	= 5	; USART Data Register Empty
                                 .equ	TXC1	= 6	; USART Transmitt Complete
                                 .equ	RXC1	= 7	; USART Receive Complete
                                 
                                 ; UCSR1B - USART Control and Status Register B
                                 .equ	TXB81	= 0	; Transmit Data Bit 8
                                 .equ	RXB81	= 1	; Receive Data Bit 8
                                 .equ	UCSZ12	= 2	; Character Size
                                 .equ	TXEN1	= 3	; Transmitter Enable
                                 .equ	RXEN1	= 4	; Receiver Enable
                                 .equ	UDRIE1	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE1	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE1	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR1C - USART Control and Status Register C
                                 .equ	UCPOL1	= 0	; Clock Polarity
                                 .equ	UCSZ10	= 1	; Character Size
                                 .equ	UCSZ11	= 2	; Character Size
                                 .equ	USBS1	= 3	; Stop Bit Select
                                 .equ	UPM10	= 4	; Parity Mode Bit 0
                                 .equ	UPM11	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL1	= 6	; USART Mode Select
                                 
                                 ; UBRR1H - USART Baud Rate Register Hight Byte
                                 ;.equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 ;.equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 ;.equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 ;.equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR1L - USART Baud Rate Register Low Byte
                                 ;.equ	UBRR0	= 0	; USART Baud Rate Register bit 0
                                 ;.equ	UBRR1	= 1	; USART Baud Rate Register bit 1
                                 ;.equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 ;.equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 ;.equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 ;.equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 ;.equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 ;.equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                                 .equ	IVSEL	= 1	; Interrupt Vector Select
                                 .equ	SM2	= 2	; Sleep Mode Select
                                 .equ	SM0	= 3	; Sleep Mode Select
                                 .equ	SM1	= 4	; Sleep Mode Select
                                 .equ	SE	= 5	; Sleep Enable
                                 .equ	SRW10	= 6	; External SRAM Wait State Select
                                 .equ	SRE	= 7	; External SRAM Enable
                                 
                                 ; XMCRA - External Memory Control Register A
                                 .equ	SRW11	= 1	; Wait state select bit upper page
                                 .equ	SRW00	= 2	; Wait state select bit lower page
                                 .equ	SRW01	= 3	; Wait state select bit lower page
                                 .equ	SRL0	= 4	; Wait state page limit
                                 .equ	SRL1	= 5	; Wait state page limit
                                 .equ	SRL2	= 6	; Wait state page limit
                                 
                                 ; XMCRB - External Memory Control Register B
                                 .equ	XMM0	= 0	; External Memory High Mask
                                 .equ	XMM1	= 1	; External Memory High Mask
                                 .equ	XMM2	= 2	; External Memory High Mask
                                 .equ	XMBK	= 7	; External Memory Bus Keeper Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value
                                 .equ	CAL1	= 1	; Oscillator Calibration Value
                                 .equ	CAL2	= 2	; Oscillator Calibration Value
                                 .equ	CAL3	= 3	; Oscillator Calibration Value
                                 .equ	CAL4	= 4	; Oscillator Calibration Value
                                 .equ	CAL5	= 5	; Oscillator Calibration Value
                                 .equ	CAL6	= 6	; Oscillator Calibration Value
                                 .equ	CAL7	= 7	; Oscillator Calibration Value
                                 
                                 ; XDIV - XTAL Divide Control Register
                                 .equ	XDIV0	= 0	; XTAl Divide Select Bit 0
                                 .equ	XDIV1	= 1	; XTAl Divide Select Bit 1
                                 .equ	XDIV2	= 2	; XTAl Divide Select Bit 2
                                 .equ	XDIV3	= 3	; XTAl Divide Select Bit 3
                                 .equ	XDIV4	= 4	; XTAl Divide Select Bit 4
                                 .equ	XDIV5	= 5	; XTAl Divide Select Bit 5
                                 .equ	XDIV6	= 6	; XTAl Divide Select Bit 6
                                 .equ	XDIVEN	= 7	; XTAL Divide Enable
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 .equ	JTRF	= 4	; JTAG Reset Flag
                                 .equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; RAMPZ - RAM Page Z Select Register
                                 .equ	RAMPZ0	= 0	; RAM Page Z Select Register Bit 0
                                 
                                 
                                 ; ***** BOOT_LOAD ********************
                                 ; SPMCSR - Store Program Memory Control Register
                                 .equ	SPMCR	= SPMCSR	; For compatibility
                                 .equ	SPMEN	= 0	; Store Program Memory Enable
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read While Write section read enable
                                 .equ	ASRE	= RWWSRE	; For compatibility
                                 .equ	RWWSB	= 6	; Read While Write Section Busy
                                 .equ	ASB	= RWWSB	; For compatibility
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 
                                 ; ***** JTAG *************************
                                 ; OCDR - On-Chip Debug Related Register in I/O Memory
                                 .equ	OCDR0	= 0	; On-Chip Debug Register Bit 0
                                 .equ	OCDR1	= 1	; On-Chip Debug Register Bit 1
                                 .equ	OCDR2	= 2	; On-Chip Debug Register Bit 2
                                 .equ	OCDR3	= 3	; On-Chip Debug Register Bit 3
                                 .equ	OCDR4	= 4	; On-Chip Debug Register Bit 4
                                 .equ	OCDR5	= 5	; On-Chip Debug Register Bit 5
                                 .equ	OCDR6	= 6	; On-Chip Debug Register Bit 6
                                 .equ	OCDR7	= 7	; On-Chip Debug Register Bit 7
                                 .equ	IDRD	= OCDR7	; For compatibility
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 ;.equ	JTRF	= 4	; JTAG Reset Flag
                                 ;.equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 
                                 ; ***** MISC *************************
                                 ; SFIOR - Special Function IO Register
                                 .equ	PSR321	= 0	; Prescaler Reset Timer/Counter3, Timer/Counter2, and Timer/Counter1
                                 .equ	PSR1	= PSR321	; For compatibility
                                 .equ	PSR2	= PSR321	; For compatibility
                                 .equ	PSR3	= PSR321	; For compatibility
                                 .equ	PSR0	= 1	; Prescaler Reset Timer/Counter0
                                 .equ	PUD	= 2	; Pull Up Disable
                                 ;.equ	ACME	= 3	; Analog Comparator Multiplexer Enable
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register A
                                 .equ	ISC00	= 0	; External Interrupt Sense Control Bit
                                 .equ	ISC01	= 1	; External Interrupt Sense Control Bit
                                 .equ	ISC10	= 2	; External Interrupt Sense Control Bit
                                 .equ	ISC11	= 3	; External Interrupt Sense Control Bit
                                 .equ	ISC20	= 4	; External Interrupt Sense Control Bit
                                 .equ	ISC21	= 5	; External Interrupt Sense Control Bit
                                 .equ	ISC30	= 6	; External Interrupt Sense Control Bit
                                 .equ	ISC31	= 7	; External Interrupt Sense Control Bit
                                 
                                 ; EICRB - External Interrupt Control Register B
                                 .equ	ISC40	= 0	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC41	= 1	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC50	= 2	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC51	= 3	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC60	= 4	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC61	= 5	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC70	= 6	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC71	= 7	; External Interrupt 7-4 Sense Control Bit
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	GICR	= EIMSK	; For compatibility
                                 .equ	GIMSK	= EIMSK	; For compatibility
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 .equ	INT2	= 2	; External Interrupt Request 2 Enable
                                 .equ	INT3	= 3	; External Interrupt Request 3 Enable
                                 .equ	INT4	= 4	; External Interrupt Request 4 Enable
                                 .equ	INT5	= 5	; External Interrupt Request 5 Enable
                                 .equ	INT6	= 6	; External Interrupt Request 6 Enable
                                 .equ	INT7	= 7	; External Interrupt Request 7 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	GIFR	= EIFR	; For compatibility
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 .equ	INTF2	= 2	; External Interrupt Flag 2
                                 .equ	INTF3	= 3	; External Interrupt Flag 3
                                 .equ	INTF4	= 4	; External Interrupt Flag 4
                                 .equ	INTF5	= 5	; External Interrupt Flag 5
                                 .equ	INTF6	= 6	; External Interrupt Flag 6
                                 .equ	INTF7	= 7	; External Interrupt Flag 7
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEWE	= 1	; EEPROM Write Enable
                                 .equ	EEMWE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 
                                 
                                 ; ***** PORTA ************************
                                 ; PORTA - Port A Data Register
                                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                                 .equ	PA0	= 0	; For compatibility
                                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                                 .equ	PA1	= 1	; For compatibility
                                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                                 .equ	PA2	= 2	; For compatibility
                                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                                 .equ	PA3	= 3	; For compatibility
                                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                                 .equ	PA4	= 4	; For compatibility
                                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                                 .equ	PA5	= 5	; For compatibility
                                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                                 .equ	PA6	= 6	; For compatibility
                                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                                 .equ	PA7	= 7	; For compatibility
                                 
                                 ; DDRA - Port A Data Direction Register
                                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                                 
                                 ; PINA - Port A Input Pins
                                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                                 .equ	PC7	= 7	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** PORTE ************************
                                 ; PORTE - Data Register, Port E
                                 .equ	PORTE0	= 0	; 
                                 .equ	PE0	= 0	; For compatibility
                                 .equ	PORTE1	= 1	; 
                                 .equ	PE1	= 1	; For compatibility
                                 .equ	PORTE2	= 2	; 
                                 .equ	PE2	= 2	; For compatibility
                                 .equ	PORTE3	= 3	; 
                                 .equ	PE3	= 3	; For compatibility
                                 .equ	PORTE4	= 4	; 
                                 .equ	PE4	= 4	; For compatibility
                                 .equ	PORTE5	= 5	; 
                                 .equ	PE5	= 5	; For compatibility
                                 .equ	PORTE6	= 6	; 
                                 .equ	PE6	= 6	; For compatibility
                                 .equ	PORTE7	= 7	; 
                                 .equ	PE7	= 7	; For compatibility
                                 
                                 ; DDRE - Data Direction Register, Port E
                                 .equ	DDE0	= 0	; 
                                 .equ	DDE1	= 1	; 
                                 .equ	DDE2	= 2	; 
                                 .equ	DDE3	= 3	; 
                                 .equ	DDE4	= 4	; 
                                 .equ	DDE5	= 5	; 
                                 .equ	DDE6	= 6	; 
                                 .equ	DDE7	= 7	; 
                                 
                                 ; PINE - Input Pins, Port E
                                 .equ	PINE0	= 0	; 
                                 .equ	PINE1	= 1	; 
                                 .equ	PINE2	= 2	; 
                                 .equ	PINE3	= 3	; 
                                 .equ	PINE4	= 4	; 
                                 .equ	PINE5	= 5	; 
                                 .equ	PINE6	= 6	; 
                                 .equ	PINE7	= 7	; 
                                 
                                 
                                 ; ***** PORTF ************************
                                 ; PORTF - Data Register, Port F
                                 .equ	PORTF0	= 0	; 
                                 .equ	PF0	= 0	; For compatibility
                                 .equ	PORTF1	= 1	; 
                                 .equ	PF1	= 1	; For compatibility
                                 .equ	PORTF2	= 2	; 
                                 .equ	PF2	= 2	; For compatibility
                                 .equ	PORTF3	= 3	; 
                                 .equ	PF3	= 3	; For compatibility
                                 .equ	PORTF4	= 4	; 
                                 .equ	PF4	= 4	; For compatibility
                                 .equ	PORTF5	= 5	; 
                                 .equ	PF5	= 5	; For compatibility
                                 .equ	PORTF6	= 6	; 
                                 .equ	PF6	= 6	; For compatibility
                                 .equ	PORTF7	= 7	; 
                                 .equ	PF7	= 7	; For compatibility
                                 
                                 ; DDRF - Data Direction Register, Port F
                                 .equ	DDF0	= 0	; 
                                 .equ	DDF1	= 1	; 
                                 .equ	DDF2	= 2	; 
                                 .equ	DDF3	= 3	; 
                                 .equ	DDF4	= 4	; 
                                 .equ	DDF5	= 5	; 
                                 .equ	DDF6	= 6	; 
                                 .equ	DDF7	= 7	; 
                                 
                                 ; PINF - Input Pins, Port F
                                 .equ	PINF0	= 0	; 
                                 .equ	PINF1	= 1	; 
                                 .equ	PINF2	= 2	; 
                                 .equ	PINF3	= 3	; 
                                 .equ	PINF4	= 4	; 
                                 .equ	PINF5	= 5	; 
                                 .equ	PINF6	= 6	; 
                                 .equ	PINF7	= 7	; 
                                 
                                 
                                 ; ***** PORTG ************************
                                 ; PORTG - Data Register, Port G
                                 .equ	PORTG0	= 0	; 
                                 .equ	PG0	= 0	; For compatibility
                                 .equ	PORTG1	= 1	; 
                                 .equ	PG1	= 1	; For compatibility
                                 .equ	PORTG2	= 2	; 
                                 .equ	PG2	= 2	; For compatibility
                                 .equ	PORTG3	= 3	; 
                                 .equ	PG3	= 3	; For compatibility
                                 .equ	PORTG4	= 4	; 
                                 .equ	PG4	= 4	; For compatibility
                                 
                                 ; DDRG - Data Direction Register, Port G
                                 .equ	DDG0	= 0	; 
                                 .equ	DDG1	= 1	; 
                                 .equ	DDG2	= 2	; 
                                 .equ	DDG3	= 3	; 
                                 .equ	DDG4	= 4	; 
                                 
                                 ; PING - Input Pins, Port G
                                 .equ	PING0	= 0	; 
                                 .equ	PING1	= 1	; 
                                 .equ	PING2	= 2	; 
                                 .equ	PING3	= 3	; 
                                 .equ	PING4	= 4	; 
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TCCR0 - Timer/Counter Control Register
                                 .equ	CS00	= 0	; Clock Select 0
                                 .equ	CS01	= 1	; Clock Select 1
                                 .equ	CS02	= 2	; Clock Select 2
                                 .equ	WGM01	= 3	; Waveform Generation Mode 1
                                 .equ	CTC0	= WGM01	; For compatibility
                                 .equ	COM00	= 4	; Compare match Output Mode 0
                                 .equ	COM01	= 5	; Compare Match Output Mode 1
                                 .equ	WGM00	= 6	; Waveform Generation Mode 0
                                 .equ	PWM0	= WGM00	; For compatibility
                                 .equ	FOC0	= 7	; Force Output Compare
                                 
                                 ; TCNT0 - Timer/Counter Register
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0 - Output Compare Register
                                 .equ	OCR0_0	= 0	; 
                                 .equ	OCR0_1	= 1	; 
                                 .equ	OCR0_2	= 2	; 
                                 .equ	OCR0_3	= 3	; 
                                 .equ	OCR0_4	= 4	; 
                                 .equ	OCR0_5	= 5	; 
                                 .equ	OCR0_6	= 6	; 
                                 .equ	OCR0_7	= 7	; 
                                 
                                 ; ASSR - Asynchronus Status Register
                                 .equ	TCR0UB	= 0	; Timer/Counter Control Register 0 Update Busy
                                 .equ	OCR0UB	= 1	; Output Compare register 0 Busy
                                 .equ	TCN0UB	= 2	; Timer/Counter0 Update Busy
                                 .equ	AS0	= 3	; Asynchronus Timer/Counter 0
                                 
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0	= 1	; Timer/Counter0 Output Compare Match Interrupt register
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0	= 1	; Output Compare Flag 0
                                 
                                 ; SFIOR - Special Function IO Register
                                 ;.equ	PSR0	= 1	; Prescaler Reset Timer/Counter0
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 2	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1B	= 3	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	OCIE1A	= 4	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	TICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; ETIMSK - Extended Timer/Counter Interrupt Mask Register
                                 .equ	OCIE1C	= 0	; Timer/Counter 1, Output Compare Match C Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 2	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1B	= 3	; Output Compare Flag 1B
                                 .equ	OCF1A	= 4	; Output Compare Flag 1A
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; ETIFR - Extended Timer/Counter Interrupt Flag register
                                 .equ	OCF1C	= 0	; Timer/Counter 1, Output Compare C Match Flag
                                 
                                 ; SFIOR - Special Function IO Register
                                 ;.equ	PSR321	= 0	; Prescaler Reset, T/C3, T/C2, T/C1
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode Bit 0
                                 .equ	PWM10	= WGM10	; For compatibility
                                 .equ	WGM11	= 1	; Waveform Generation Mode Bit 1
                                 .equ	PWM11	= WGM11	; For compatibility
                                 .equ	COM1C0	= 2	; Compare Output Mode 1C, bit 0
                                 .equ	COM1C1	= 3	; Compare Output Mode 1C, bit 1
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Compare Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Clock Select bit 0
                                 .equ	CS11	= 1	; Clock Select 1 bit 1
                                 .equ	CS12	= 2	; Clock Select1 bit 2
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	CTC10	= WGM12	; For compatibility
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	CTC11	= WGM13	; For compatibility
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter1 Control Register C
                                 .equ	FOC1C	= 5	; Force Output Compare for channel C
                                 .equ	FOC1B	= 6	; Force Output Compare for channel B
                                 .equ	FOC1A	= 7	; Force Output Compare for channel A
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TCCR2 - Timer/Counter Control Register
                                 .equ	CS20	= 0	; Clock Select
                                 .equ	CS21	= 1	; Clock Select
                                 .equ	CS22	= 2	; Clock Select
                                 .equ	WGM21	= 3	; Waveform Generation Mode
                                 .equ	CTC2	= WGM21	; For compatibility
                                 .equ	COM20	= 4	; Compare Match Output Mode
                                 .equ	COM21	= 5	; Compare Match Output Mode
                                 .equ	WGM20	= 6	; Wafeform Generation Mode
                                 .equ	PWM2	= WGM20	; For compatibility
                                 .equ	FOC2	= 7	; Force Output Compare
                                 
                                 ; TCNT2 - Timer/Counter Register
                                 .equ	TCNT2_0	= 0	; Timer/Counter Register Bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter Register Bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter Register Bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter Register Bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter Register Bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter Register Bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter Register Bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter Register Bit 7
                                 
                                 ; OCR2 - Output Compare Register
                                 .equ	OCR2_0	= 0	; Output Compare Register Bit 0
                                 .equ	OCR2_1	= 1	; Output Compare Register Bit 1
                                 .equ	OCR2_2	= 2	; Output Compare Register Bit 2
                                 .equ	OCR2_3	= 3	; Output Compare Register Bit 3
                                 .equ	OCR2_4	= 4	; Output Compare Register Bit 4
                                 .equ	OCR2_5	= 5	; Output Compare Register Bit 5
                                 .equ	OCR2_6	= 6	; Output Compare Register Bit 6
                                 .equ	OCR2_7	= 7	; Output Compare Register Bit 7
                                 
                                 ; TIMSK - 
                                 .equ	TOIE2	= 6	; 
                                 .equ	OCIE2	= 7	; 
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 6	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2	= 7	; Output Compare Flag 2
                                 
                                 
                                 ; ***** TIMER_COUNTER_3 **************
                                 ; ETIMSK - Extended Timer/Counter Interrupt Mask Register
                                 .equ	OCIE3C	= 1	; Timer/Counter3, Output Compare Match Interrupt Enable
                                 .equ	TOIE3	= 2	; Timer/Counter3 Overflow Interrupt Enable
                                 .equ	OCIE3B	= 3	; Timer/Counter3 Output CompareB Match Interrupt Enable
                                 .equ	OCIE3A	= 4	; Timer/Counter3 Output CompareA Match Interrupt Enable
                                 .equ	TICIE3	= 5	; Timer/Counter3 Input Capture Interrupt Enable
                                 
                                 ; ETIFR - Extended Timer/Counter Interrupt Flag register
                                 .equ	OCF3C	= 1	; Timer/Counter3 Output Compare C Match Flag
                                 .equ	TOV3	= 2	; Timer/Counter3 Overflow Flag
                                 .equ	OCF3B	= 3	; Output Compare Flag 1B
                                 .equ	OCF3A	= 4	; Output Compare Flag 1A
                                 .equ	ICF3	= 5	; Input Capture Flag 1
                                 
                                 ; SFIOR - Special Function IO Register
                                 ;.equ	PSR321	= 0	; Prescaler Reset, T/C3, T/C2, T/C1
                                 ;.equ	PSR1	= PSR321	; For compatibility
                                 ;.equ	PSR2	= PSR321	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 ; TCCR3A - Timer/Counter3 Control Register A
                                 .equ	WGM30	= 0	; Waveform Generation Mode Bit 0
                                 .equ	PWM30	= WGM30	; For compatibility
                                 .equ	WGM31	= 1	; Waveform Generation Mode Bit 1
                                 .equ	PWM31	= WGM31	; For compatibility
                                 .equ	COM3C0	= 2	; Compare Output Mode 3C, bit 0
                                 .equ	COM3C1	= 3	; Compare Output Mode 3C, bit 1
                                 .equ	COM3B0	= 4	; Compare Output Mode 3B, bit 0
                                 .equ	COM3B1	= 5	; Compare Output Mode 3B, bit 1
                                 .equ	COM3A0	= 6	; Comparet Ouput Mode 3A, bit 0
                                 .equ	COM3A1	= 7	; Compare Output Mode 3A, bit 1
                                 
                                 ; TCCR3B - Timer/Counter3 Control Register B
                                 .equ	CS30	= 0	; Clock Select 3 bit 0
                                 .equ	CS31	= 1	; Clock Select 3 bit 1
                                 .equ	CS32	= 2	; Clock Select3 bit 2
                                 .equ	WGM32	= 3	; Waveform Generation Mode
                                 .equ	CTC30	= WGM32	; For compatibility
                                 .equ	WGM33	= 4	; Waveform Generation Mode
                                 .equ	CTC31	= WGM33	; For compatibility
                                 .equ	ICES3	= 6	; Input Capture 3 Edge Select
                                 .equ	ICNC3	= 7	; Input Capture 3  Noise Canceler
                                 
                                 ; TCCR3C - Timer/Counter3 Control Register C
                                 .equ	FOC3C	= 5	; Force Output Compare for channel C
                                 .equ	FOC3B	= 6	; Force Output Compare for channel B
                                 .equ	FOC3A	= 7	; Force Output Compare for channel A
                                 
                                 ; TCNT3L - Timer/Counter3 Low Byte
                                 .equ	TCN3L0	= 0	; Timer/Counter 3 bit 0
                                 .equ	TCN3L1	= 1	; Timer/Counter 3 bit 1
                                 .equ	TCN3L2	= 2	; Timer/Counter 3 bit 2
                                 .equ	TCN3L3	= 3	; Timer/Counter 3 bit 3
                                 .equ	TCN3L4	= 4	; Timer/Counter 3 bit 4
                                 .equ	TCN3L5	= 5	; Timer/Counter 3 bit 5
                                 .equ	TCN3L6	= 6	; Timer/Counter 3 bit 6
                                 .equ	TCN3L7	= 7	; Timer/Counter 3 bit 7
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCR - Watchdog Timer Control Register
                                 .equ	WDTCSR	= WDTCR	; For compatibility
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDTOE	= WDCE	; For compatibility
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register
                                 .equ	ADCSR	= ADCSRA	; For compatibility
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADFR	= 5	; ADC  Free Running Select
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	BODEN	= 6	; Brown out detector enable
                                 .equ	BODLEVEL	= 7	; Brown out detector trigger level
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select Reset Vector
                                 .equ	BOOTSZ0	= 1	; Select Boot Size
                                 .equ	BOOTSZ1	= 2	; Select Boot Size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	CKOPT	= 4	; Oscillator Options
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	JTAGEN	= 6	; Enable JTAG
                                 .equ	OCDEN	= 7	; Enable OCD
                                 
                                 ; EXTENDED fuse bits
                                 .equ	WDTON	= 0	; Watchdog timer always on
                                 .equ	M103C	= 1	; ATmega103 compatibility mode
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0xffff	; Note: Word address
                                 .equ	IOEND	= 0x00ff
                                 .equ	SRAM_START	= 0x0100
                                 .equ	SRAM_SIZE	= 4096
                                 .equ	RAMEND	= 0x10ff
                                 .equ	XRAMEND	= 0xffff
                                 .equ	E2END	= 0x0fff
                                 .equ	EEPROMEND	= 0x0fff
                                 .equ	EEADRBITS	= 12
                                 #pragma AVRPART MEMORY PROG_FLASH 131072
                                 #pragma AVRPART MEMORY EEPROM 4096
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 4096
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0xf000
                                 .equ	NRWW_STOP_ADDR	= 0xffff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0xefff
                                 .equ	PAGESIZE	= 128
                                 .equ	FIRSTBOOTSTART	= 0xfe00
                                 .equ	SECONDBOOTSTART	= 0xfc00
                                 .equ	THIRDBOOTSTART	= 0xf800
                                 .equ	FOURTHBOOTSTART	= 0xf000
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	INT2addr	= 0x0006	; External Interrupt Request 2
                                 .equ	INT3addr	= 0x0008	; External Interrupt Request 3
                                 .equ	INT4addr	= 0x000a	; External Interrupt Request 4
                                 .equ	INT5addr	= 0x000c	; External Interrupt Request 5
                                 .equ	INT6addr	= 0x000e	; External Interrupt Request 6
                                 .equ	INT7addr	= 0x0010	; External Interrupt Request 7
                                 .equ	OC2addr	= 0x0012	; Timer/Counter2 Compare Match
                                 .equ	OVF2addr	= 0x0014	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0016	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0018	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x001a	; Timer/Counter Compare Match B
                                 .equ	OVF1addr	= 0x001c	; Timer/Counter1 Overflow
                                 .equ	OC0addr	= 0x001e	; Timer/Counter0 Compare Match
                                 .equ	OVF0addr	= 0x0020	; Timer/Counter0 Overflow
                                 .equ	SPIaddr	= 0x0022	; SPI Serial Transfer Complete
                                 .equ	URXC0addr	= 0x0024	; USART0, Rx Complete
                                 .equ	UDRE0addr	= 0x0026	; USART0 Data Register Empty
                                 .equ	UTXC0addr	= 0x0028	; USART0, Tx Complete
                                 .equ	ADCCaddr	= 0x002a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x002c	; EEPROM Ready
                                 .equ	ACIaddr	= 0x002e	; Analog Comparator
                                 .equ	OC1Caddr	= 0x0030	; Timer/Counter1 Compare Match C
                                 .equ	ICP3addr	= 0x0032	; Timer/Counter3 Capture Event
                                 .equ	OC3Aaddr	= 0x0034	; Timer/Counter3 Compare Match A
                                 .equ	OC3Baddr	= 0x0036	; Timer/Counter3 Compare Match B
                                 .equ	OC3Caddr	= 0x0038	; Timer/Counter3 Compare Match C
                                 .equ	OVF3addr	= 0x003a	; Timer/Counter3 Overflow
                                 .equ	URXC1addr	= 0x003c	; USART1, Rx Complete
                                 .equ	UDRE1addr	= 0x003e	; USART1, Data Register Empty
                                 .equ	UTXC1addr	= 0x0040	; USART1, Tx Complete
                                 .equ	TWIaddr	= 0x0042	; 2-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0044	; Store Program Memory Read
                                 
                                 .equ	INT_VECTORS_SIZE	= 70	; size in words
                                 
                                 #endif  /* _M128DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ;*
                                 ;*	Wei_Huang_Final_Project.asm
                                 ;*
                                 ;*	Enter the description of the program here
                                 ;*
                                 ;*	This is the skeleton file for the ECE 375 final project
                                 ;*
                                 ;***********************************************************
                                 ;*
                                 ;*	 Author: Huang Wei
                                 ;*	 Date: 12/2/2020 4:09:24 PM
                                 ;*
                                 ;***********************************************************
                                 .include "m128def.inc"			; Include definition file
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega128.xml ***********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m128def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega128
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega128
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M128DEF_INC_
                                 #endif  /* _M128DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 ;***********************************************************
                                 ;*	Internal Register Definitions and Constants
                                 ;*	(feel free to edit these or add others)
                                 ;***********************************************************
                                 .def	rlo = r0				; Low byte of MUL result
                                 .def	rhi = r1				; High byte of MUL result
                                 .def	zero = r2				; Zero register, set to zero in INIT, useful for calculations
                                 .def    A = r7
                                 .def	mpr = r16				; Multipurpose register 
                                 .def	LETTER = r23		; LETTER Counter
                                 .def	BIT = r24				; BIT Counter
                                 .def	dataptr = r25			; data ptr
                                 
                                 
                                 .equ	EngDirR = 5				; right Engine Direction Bit
                                 .equ	EngDirL = 6				; left Engine Direction Bit
                                 
                                 
                                 .equ    FIRST = 0				;INIT 0
                                 .equ	Forward = 6				;INIT 6
                                 .equ	REVERSE = 7				;INIT7
                                 .equ	ACTVIE = 4				;INIT4
                                 .equ    NONE = 5				;INIT5
                                 .equ    WTime = 15
                                 .equ	SpeedMIN = 0
                                 
                                 
                                 ;***********************************************************
                                 ;*	Data segment variables
                                 ;*	(feel free to edit these or add others)
                                 ;***********************************************************
                                 .dseg
                                 .org	$0200						; data memory allocation for operands
000200                           operand1:		.byte 2				; allocate 2 bytes for a variable named operand1
                                 .org	$0300
000300                           operand2:		.byte 26
                                 
                                 ; Important Reminder:
                                 ; The LCD driver expects its display data to be arranged as follows:
                                 ; - Line 1 data is in address space $0100-$010F
                                 ; - Line 2 data is in address space $0110-$010F
                                 
                                 ;***********************************************************
                                 ;*	Start of Code Segment
                                 ;***********************************************************
                                 .cseg							; Beginning of code segment
                                 ;-----------------------------------------------------------
                                 ; Interrupt Vectors
                                 ;-----------------------------------------------------------
                                 .org	$0000					; Beginning of IVs
000000 c045                      		rjmp  INIT				; Reset interrupt
                                 .org	$0046					; End of Interrupt Vectors
                                 ;-----------------------------------------------------------
                                 ; Program Initialization
                                 ;-----------------------------------------------------------
                                 INIT:	; The initialization routine
000046 2422                      	clr  zero
                                 	; To do
                                 	; your code goes in this area
                                 	   ; Initialize Stack Pointer
000047 ef0f                          ldi mpr, low(RAMEND)	; Load low byte of end SRAM address into mpr
000048 bf0d                          out SPL, mpr			; Write byte to SPL
000049 e100                          ldi mpr, high(RAMEND)	;Load high byte of end SRAM address into mpr
00004a bf0e                          out SPH, mpr			; Write byte to SPH
                                 	
                                 	; Configure I/O ports
                                 	;configure port B
00004b ef0f                      	ldi mpr, $FF					;set port B data direction register
00004c bb07                      	out DDRB, mpr					;for output
00004d e000                      	ldi mpr, $00					; initialize port B data register
00004e bb08                      	out PORTB, mpr					; so all port B outputs are low
                                 
                                     ; Initialize port D for input
00004f e000                          ldi mpr, $00	;Set port D Data Direcrion register
000050 bb01                          out DDRD, mpr   ; for output
000051 ef0f                          ldi mpr,  $FF	; Initialize Port D Data register
000052 bb02                          out PORTD, mpr  ; so all Port D inputs are Tri-state
                                     
                                     ; Initialize LCD Display
000053 d37b                          rcall LCDInit
                                 	;initialize	the begin words show on the LCD display 
000054 d024                      	rcall PROGRAM_START		
                                 	;rcall TIME		
000055 ef8f                      	ldi BIT, -1						; define the bit
000056 e471                      	ldi LETTER, 65					;define A to letter
000057 e040                      	ldi type, 0
                                 
                                 
                                 	
                                 ;-----------------------------------------------------------
                                 ; Main procedure
                                 ;-----------------------------------------------------------
                                 MAIN:
                                 	; more code
                                 	; you will probably have an infinite loop in your code that handles input from the user
000058 b300                      	in mpr, PIND		;get the whisker input from port D
000059 ff05                      	sbrs mpr, NONE
00005a f3e9                      	breq MAIN
                                 
00005b ff00                      	sbrs mpr, FIRST		;Skip if Bit in Register First Set
00005c d038                      	rcall INIT0_STEP	;call function
                                 
00005d ff06                      	sbrs mpr, Forward	;Skip if Bit in Register Forware Set
00005e d06e                      	rcall HIT_FORWARD	;call function
                                 
00005f ff07                      	sbrs mpr, REVERSE		;Skip if Bit in Register REVERSE Set
000060 d096                      	rcall HIT_REVERSE	;call function
                                 
000061 ff04                      	sbrs mpr, ACTVIE	;skip if bit in register ACTIVE
000062 d0bb                      	rcall PIND_4		;CALL FUNCTION
                                 
000063 cff4                      	rjmp	MAIN		;jump back to MAin to create infinite loop
                                 
                                 
                                 ;***********************************************************
                                 ;*	Procedures and Subroutines
                                 ;***********************************************************
                                 ; your code can go here as well
                                 ;***********************************************************
                                 ;*	Functions and Subroutines
                                 ;***********************************************************
                                 
                                 ;-----------------------------------------------------------
                                 ; Func: LoadLine
                                 ; Desc: load the stirng from Stored Program Data to
                                 ;		the LCD display
                                 ;-----------------------------------------------------------
                                 LoadLine:
                                 	;push save register
000064 930f                      	push mpr		;save mpr
000065 b70f                      	in mpr, SREG	;save status register
000066 930f                      	push mpr		;
000067 93ef                      	push ZL			;save Z register
000068 93ff                      	push ZH			;
000069 93cf                      	push YL			;save Y register 
00006a 93df                      	push YH			;
                                 	
                                 ;	clr count
                                 LOADSTRINGLOOP:
00006b 9105                      	lpm mpr, Z+     ; load byte from Z point to next byte
00006c 9309                      	st Y+, mpr      ; store byte into memory and incremeny 
00006d 17ea                      	cp ZL, XL       ; check the low byte match
00006e f7e1                      	brne LOADSTRINGLOOP ; not end of the line, continue
00006f 17fb                      	cp ZH, XH       ; check the high byte match
000070 f7d1                      	brne LOADSTRINGLOOP ; not end of the line, continue
                                 
                                 	;pop restore
000071 91df                      	pop YH			;restore Y register
000072 91cf                      	pop YL
000073 91ff                      	pop ZH			;restore Z register 
000074 91ef                      	pop ZL
000075 910f                      	pop mpr			;restore mpr
000076 bf0f                      	out SREG, mpr	;restore the status register	
000077 910f                      	pop mpr
000078 9508                      	ret				;end the function
                                 
                                 ;-----------------------------------------------------------
                                 ; Func: PROGRAM_START
                                 ; Desc: set the stirng shows on the LCD display begin of the
                                 ;		program
                                 ;-----------------------------------------------------------
                                 PROGRAM_START:
                                 	;push save
000079 93af                      	push XL		;save X register
00007a 93bf                      	push XH		;
00007b 93cf                      	push YL		;save Y register
00007c 93df                      	push YH		;
00007d 93ef                      	push ZL		;save Z register
00007e 93ff                      	push ZH		;
                                 	
00007f e7ac                      	ldi XL,low (STRING_END1<<1)		;load the low byte of the end of string
000080 e0b7                      	ldi XH, high(STRING_END1<<1)	;load the high byte of the end of string
                                 
000081 e0c0                      	ldi YL, low(LCDLn1Addr)			;load the low byte of the LCDLn1Addr
000082 e0d1                      	ldi YH, high(LCDLn1Addr)		;load the high byte of the LCDLn1Addr
                                 
000083 e6ec                      	ldi ZL, low(STRING_LINE1<<1)	;load the low byte of the begin of string
000084 e0f7                      	ldi ZH, high(STRING_LINE1<<1)	;load the high byte of the begin of string
000085 dfde                      	rcall LoadLine
                                 
                                 
000086 e8ac                      	ldi XL,low (STRING_END2<<1)		;load the low byte of the end of string
000087 e0b7                      	ldi XH, high(STRING_END2<<1)	;load the high byte of the end of string
                                 
000088 e1c0                      	ldi YL, low(LCDLn2Addr)			;load the low byte of the LCDLn2Addr
000089 e0d1                      	ldi YH, high(LCDLn2Addr)		;load the high byte of the LCDLn2Addr
                                 
00008a e7ec                      	ldi ZL, low(STRING_LINE2<<1)	;load the low byte of the begin of string
00008b e0f7                      	ldi ZH, high(STRING_LINE2<<1)	;load the high byte of the begin of string
00008c dfd7                      	rcall LoadLine					;call function
                                 
00008d d380                      	rcall LCDWrite					;call function to write word to LDC
                                 
                                 	;pop restore register
00008e 91ff                      	pop ZH	;retsore Z register
00008f 91ef                      	pop ZL	;
000090 91df                      	pop YH	;restore Y register
000091 91cf                      	pop YL	;
000092 91bf                      	pop XH	;restore X register
000093 91af                      	pop XL	;
000094 9508                      	ret		;end function
                                 
                                 ;-----------------------------------------------------------
                                 ; Func: INIT0_STEP
                                 ; Desc: When press INIT0, the string wil change, and INIT0 
                                 ;		also is confirm button
                                 ;-----------------------------------------------------------
                                 INIT0_STEP:
000095 930f                      	push	mpr			; Save mpr register
000096 931f                      	push	wait		; Save wait register
000097 b70f                      	in		mpr, SREG	; Save program state
000098 930f                      	push	mpr			;
000099 93af                          push XL         ; save X register
00009a 93bf                          push XH         ; 
00009b 93cf                          push YL         ; save Y register
00009c 93df                          push YH         ; 
00009d 93ef                          push ZL         ; save Z register
00009e 93ff                          push ZH         ; 
                                 	
                                 	;test if PD0 press
00009f e041                      	ldi type,1
                                 
0000a0 e01f                      	ldi		wait, WTime	; Wait for 1 second
0000a1 d305                      	rcall	Waitt			; Call wait function
                                 
0000a2 e9ac                      	ldi XL,low (STRING_END3<<1)		;load the low byte of the end of string
0000a3 e0b7                      	ldi XH, high(STRING_END3<<1)	;load the high byte of the end of string
                                 
0000a4 e0c0                      	ldi YL, low(LCDLn1Addr)			;load the low byte of the LCDLn1Addr
0000a5 e0d1                      	ldi YH, high(LCDLn1Addr)		;load the high byte of the LCDLn1Addr
                                 
0000a6 e8ec                      	ldi ZL, low(STRING_LINE3<<1)	;load the low byte of the begin of string
0000a7 e0f7                      	ldi ZH, high(STRING_LINE3<<1)	;load the high byte of the begin of string
                                 
0000a8 dfbb                      	rcall LoadLine					;call function
0000a9 d367                      	rcall LCDWrLn1					;calll function to write word to LDC
                                 
                                 
0000aa e0c0                      	ldi YL, low (operand2)
0000ab e0d3                      	ldi YH, high(operand2)
                                 
                                 
                                 
0000ac 9583                      	inc BIT							;increase BIT 
0000ad 0fc8                      	add YL,BIT
0000ae e471                      	ldi LETTER, 65
0000af 9379                      	st Y+, LETTER
0000b0 3180                      	cpi BIT, 16						;compare BIT and 16 bit
0000b1 f019                      	breq FULL_BIT					;BIT = 16 bite jump to PIND_4
0000b2 3080                      	cpi BIT,0						;compare BIT and 0
0000b3 f019                      	breq FIRST_LETTER				;if BIT equal 0 jump to FIRST_LETTER
0000b4 c007                      	rjmp SECOND_LETTER				;otherwise jump to SECOND_LETTER
                                 
                                 
                                 FULL_BIT:
0000b5 d068                      	rcall PIND_4
0000b6 cfde                      	rjmp INIT0_STEP				
                                 
                                 FIRST_LETTER:
0000b7 d38c                      	rcall LCDClrLn2					;clear the line in LCD
0000b8 2f07                      	mov mpr, LETTER					;move A to mpr
0000b9 e032                      	ldi line, 2						;show the second line
0000ba 2f28                      	mov count, BIT					; show on the first bit
0000bb c005                      	rjmp INIT0_END					;jump to end function
                                 
                                 SECOND_LETTER:
0000bc e471                      	ldi LETTER, 65
0000bd 2f07                      	mov mpr, LETTER					;move A to mpr
0000be e032                      	ldi line, 2						;show the second line
0000bf 2f28                      	mov count, BIT					; show on the first bit
0000c0 c000                      	rjmp INIT0_END					;jump to end function
                                 
                                 INIT0_END:
0000c1 d392                      	rcall LCDWriteByte				;call function wirte the byte
                                 	;add YL, BIT
                                 
                                 	//ldi		mpr, $FF		;clear queued interrupt on INT0-3
                                 	//out		EIFR, mpr		;
                                 
0000c2 91ff                      	pop ZH	;restore Z register
0000c3 91ef                      	pop ZL	;
0000c4 91df                      	pop YH	;restore Y register
0000c5 91cf                      	pop YL	;
0000c6 91bf                      	pop XH	;restore X register
0000c7 91af                      	pop XL	;
0000c8 910f                      	pop mpr			;restore mpr
0000c9 bf0f                      	out SREG, mpr	;restore the status register	
0000ca 911f                      	pop	wait		; Save wait register
0000cb 910f                      	pop mpr
0000cc 9508                      	ret
                                 
                                 ;-----------------------------------------------------------
                                 ; Func: HIT_FORWARD
                                 ; Desc: When press INIT6, the second line letter will be 
                                 ;		move forward. ex. A -> B
                                 ;-----------------------------------------------------------
                                 HIT_FORWARD:
                                 	;push save register
0000cd 930f                      	push	mpr			; Save mpr register
0000ce 931f                      	push	wait		; Save wait register
0000cf b70f                      	in		mpr, SREG	; Save program state
0000d0 930f                      	push	mpr			;
0000d1 93cf                      	push YL
0000d2 93df                      	push YH
                                 
0000d3 e01f                      	ldi		wait, WTime	; Wait for 1 second
0000d4 d2d2                      	rcall	Waitt			; Call wait function
                                 	;test if PD0 press
0000d5 e001                      	ldi mpr, 1
0000d6 1704                      	cp  mpr, type
0000d7 f009                      	breq HIT_MOVE
0000d8 cf7f                      	rjmp MAIN
                                 
                                 
                                 HIT_MOVE:
0000d9 e0c0                      	ldi YL, low(operand2)	
0000da e0d3                      	ldi YH, high(operand2)
                                 	
0000db ef5f                      	ldi q, -1
0000dc 2e75                      	mov A, q
                                 
0000dd 9573                      	inc LETTER		;change letter to B
0000de 357b                      	cpi LETTER, 91	; compare the letter if Z
0000df f021                      	breq BACK_A		; if z jum to A
0000e0 2f07                      	mov mpr, LETTER	;move the ltter to mpr
0000e1 e032                      	ldi line, 2		; show on the second line
0000e2 2f28                      	mov count, BIT	; show on first bit
0000e3 c005                      	rjmp DONE
                                 
                                 BACK_A:
0000e4 e471                      	ldi LETTER, 65	;;set the letter is A
0000e5 2f07                      	mov mpr, LETTER	;move the ltter to mpr
0000e6 e032                      	ldi line, 2		; show on the second line
0000e7 2f28                      	mov count, BIT	; show on first bit
0000e8 c000                      	rjmp DONE
                                 DONE:
0000e9 d36a                      	rcall LCDWriteByte ;call function wirte byte	
                                 
                                 	;compare count and letter bit
                                 COMPAREA1:
0000ea 9473                      	 inc A
0000eb 1587                      	  cp BIT, A
0000ec f009                      	breq NEXT_A1
0000ed f7e1                           brne COMPAREA1
                                 NEXT_A1:
0000ee 0dc7                      	add YL, A
0000ef 9379                      	st Y+, LETTER
                                 
                                 
                                 
0000f0 91df                      	pop YH
0000f1 91cf                      	pop YL
0000f2 910f                      	pop mpr			;restore mpr
0000f3 911f                      	pop wait
0000f4 bf0f                      	out SREG, mpr	;restore the status register	
0000f5 910f                      	pop mpr
0000f6 9508                      	ret				;end the function
                                 
                                 ;-----------------------------------------------------------
                                 ; Func: HIT_FORWARD
                                 ; Desc: When press INIT6, the second line letter will be 
                                 ;		move forward. ex. A -> B
                                 ;-----------------------------------------------------------
                                 HIT_REVERSE:
                                 	;push save register
0000f7 930f                      	push	mpr			; Save mpr register
0000f8 931f                      	push	wait		; Save wait register
0000f9 b70f                      	in		mpr, SREG	; Save program state
0000fa 930f                      	push	mpr			;
0000fb e01f                      	ldi		wait, WTime	; Wait for 1 second
0000fc d2aa                      	rcall	Waitt			; Call wait function
                                 
                                 	;test if PD0 press
0000fd e001                      	ldi mpr, 1
0000fe 1704                      	cp  mpr, type
0000ff f009                      	breq HIT_REVE
000100 cf57                      	rjmp MAIN
                                 
                                 HIT_REVE:
000101 e0c0                      	ldi YL, low(operand2)
000102 e0d3                      	ldi YH, high(operand2)
000103 0fc8                      	add YL, BIT	
000104 ef5f                      	ldi q, -1
000105 2e75                      	mov A, q
                                 
000106 957a                      	dec LETTER		;change letter to Z
000107 3470                      	cpi LETTER, 64	; compare the letter if Z
000108 f021                      	breq MOVE_Z		; A->Z
000109 2f07                      	mov mpr, LETTER	;move the ltter to mpr
00010a e032                      	ldi line, 2		; show on the second line
00010b 2f28                      	mov count, BIT	; show on first bit
00010c c005                      	rjmp DONE_BACK
                                 
                                 MOVE_Z:
00010d e57a                      	ldi LETTER, 90	;set the letter is z
00010e 2f07                      	mov mpr, LETTER	;move the ltter to mpr
00010f e032                      	ldi line, 2		; show on the second line
000110 2f28                      	mov count, BIT	; show on first bit
000111 c000                      	rjmp DONE_BACK
                                 
                                 DONE_BACK:
000112 d341                      	rcall  LCDWriteByte ;call function wirte byte
                                 
                                 ;COMPARE the count and letter bit
                                 COMPAREA2:
000113 9473                         inc A
000114 1587                         cp BIT, A
000115 f009                         breq NEXT_A2
000116 f7e1                         brne COMPAREA2
                                 
                                 NEXT_A2:
000117 0dc7                      	add YL, A
000118 9379                      	st Y+, LETTER
                                 
                                 
000119 910f                      	pop mpr			;restore mpr
00011a 911f                      	pop wait
00011b bf0f                      	out SREG, mpr	;restore the status register	
00011c 910f                      	pop mpr
00011d 9508                      	ret				;end the function
                                 ;-----------------------------------------------------------
                                 ; Func: PIND_4
                                 ; Desc: Active the Mors code
                                 ;-----------------------------------------------------------
                                 PIND_4:
00011e 930f                      	push	mpr			; Save mpr register
00011f 931f                      	push	wait		; Save wait register
000120 b70f                      	in		mpr, SREG	; Save program state
000121 930f                      	push	mpr			;
000122 93af                          push XL         ; save X register
000123 93bf                          push XH         ; 
000124 93cf                          push YL         ; save Y register
000125 93df                          push YH         ; 
000126 93ef                          push ZL         ; save Z register
000127 93ff                          push ZH         ; 
                                 
000128 e01f                      	ldi		wait, WTime	; Wait for 1 second
000129 d27d                      	rcall	Waitt			; Call wait function
                                 
                                 	;test if PD0 press
00012a e051                      	ldi r21, 1
00012b 1754                      	cp  r21, type
00012c f009                      	breq ACTIVE_START
00012d cf2a                      	rjmp MAIN
                                 
                                 
                                 
                                 
                                 	
                                 ACTIVE_START:
00012e e9ec                      	ldi ZL, low(UserMode <<1)	;load the low byte time of usermode
00012f e0f7                      	ldi ZH, high(UserMode <<1)	;load the high byte time of usermode
000130 e0c0                      	ldi YL, low(operand1)
000131 e0d2                      	ldi YH, high(operand1)
000132 e0a0                      	ldi XL, low(operand2)
000133 e0b3                      	ldi XH, high(operand2)
000134 9135                      	lpm r19, Z+
000135 9339                      	st Y+, r19
000136 3031                      	cpi r19, 0x01
000137 f009                      	breq TO_WAIT_1		;usermode == 00 use 200ms
000138 c003                      	rjmp TO_WAIT_200				;otherwise use 1sec
                                 
                                 TO_WAIT_1:
000139 3f8f                      	cpi BIT, -1
00013a f021                      	breq ACTIVE_END1
00013b c004                      	rjmp WAIT_1
                                 
                                 TO_WAIT_200:				;jump function to 200ms
00013c 3f8f                      	cpi BIT,-1
00013d f009                      	breq ACTIVE_END1
00013e c0f4                      	rjmp WAIT_200
                                 
                                 ACTIVE_END1:
00013f c1e1                      rjmp ACTIVE_END
                                 
                                 
                                 WAIT_1:			
000140 910d                      	ld mpr, X+			;move the LETTER TO mpr			
000141 3401                      	cpi mpr, 65				;compare the letter
000142 0000                      	nop
000143 f009                      	breq TO_WAIT_A_1		;letter == 65 to A 
000144 f409                      	brne CHECKB1
                                 TO_WAIT_A_1:
000145 c063                      	rjmp WAIT_A_1
                                 CHECKB1:
000146 3402                      	cpi mpr, 66				;
000147 f009                      	breq TO_WAIT_B_1		;letter ==66 to B
000148 f409                      	brne CHECKC1
                                 TO_WAIT_B_1:
000149 c063                      	rjmp WAIT_B_1
                                 CHECKC1:
00014a 3403                      	cpi mpr, 67				;
00014b f009                      	breq TO_WAIT_C_1		;letter ==67 to C
00014c f409                      	brne CHECKD1
                                 TO_WAIT_C_1:
00014d c065                      	rjmp WAIT_C_1
                                 CHECKD1:
00014e 3404                      	cpi mpr, 68				;
00014f f009                      	breq TO_WAIT_D_1		;letter ==68 to D
000150 f409                      	brne CHECKE1
                                 TO_WAIT_D_1:
000151 c067                      	rjmp WAIT_D_1
                                 CHECKE1:
000152 3405                      	cpi mpr, 69				;
000153 f009                      	breq TO_WAIT_E_1		;letter ==69 to E
000154 f409                      	brne CHECKF1
                                 TO_WAIT_E_1:
000155 c068                      	rjmp WAIT_E_1
                                 CHECKF1:
000156 3406                      	cpi mpr, 70				;
000157 f009                      	breq TO_WAIT_F_1		;letter ==70 to F
000158 f409                      	brne CHECKG1
                                 TO_WAIT_F_1:
000159 c067                      	rjmp WAIT_F_1
                                 CHECKG1:
00015a 3407                      	cpi mpr, 71				;
00015b f009                      	breq TO_WAIT_G_1		;letter ==71 to G
00015c f409                      	brne CHECKH1
                                 TO_WAIT_G_1:
00015d c069                      	rjmp WAIT_G_1
                                 CHECKH1:
00015e 3408                      	cpi mpr, 72				;
00015f f009                      	breq TO_WAIT_H_1		;letter ==72 to H
000160 f409                      	brne CHECKI1
                                 TO_WAIT_H_1:
000161 c06a                      	rjmp WAIT_H_1
                                 CHECKI1:
000162 3409                      	cpi mpr, 73				;
000163 f009                      	breq TO_WAIT_I_1		;letter ==73 to I
000164 f409                      	brne CHECKJ1
                                 TO_WAIT_I_1:
000165 c06c                      	rjmp WAIT_I_1
                                 CHECKJ1:
000166 340a                      	cpi mpr, 74				;		
000167 f009                      	breq TO_WAIT_J_1		;letter ==74 to J
000168 f409                      	brne CHECKK1
                                 TO_WAIT_J_1:
000169 c06c                      	rjmp WAIT_J_1
                                 CHECKK1:
00016a 340b                      	cpi mpr, 75				;
00016b f009                      	breq TO_WAIT_K_1		;letter ==75 to K
00016c f409                      	brne CHECKL1
                                 TO_WAIT_K_1:
00016d c06e                      	rjmp WAIT_K_1
                                 CHECKL1:
00016e 340c                      	cpi mpr, 76				;		
00016f f009                      	breq TO_WAIT_L_1		;letter ==76 to L
000170 f409                      	brne CHECKM1
                                 TO_WAIT_L_1:
000171 c06f                      	rjmp WAIT_L_1
                                 CHECKM1:
000172 340d                      	cpi mpr, 77				;
000173 f009                      	breq TO_WAIT_M_1		;letter ==77 to M
000174 f409                      	brne CHECKN1
                                 TO_WAIT_M_1:
000175 c071                      	rjmp WAIT_M_1
                                 CHECKN1:
000176 340e                      	cpi mpr, 78				;
000177 f009                      	breq TO_WAIT_N_1		;letter ==78 to N
000178 f409                      	brne CHECKO1
                                 TO_WAIT_N_1:
000179 c071                      	rjmp WAIT_N_1
                                 CHECKO1:
00017a 340f                      	cpi mpr, 79				;	
00017b f009                      	breq TO_WAIT_O_1		;letter ==79 to O
00017c f409                      	brne CHECKP1
                                 TO_WAIT_O_1:
00017d c071                      	rjmp WAIT_O_1
                                 CHECKP1:
00017e 3500                      	cpi mpr, 80				;
00017f f009                      	breq TO_WAIT_P_1		;letter ==80 to P
000180 f409                      	brne CHECKQ1
                                 TO_WAIT_P_1:
000181 c072                      	rjmp WAIT_P_1
                                 CHECKQ1:
000182 3501                      	cpi mpr, 81				;
000183 f009                      	breq TO_WAIT_Q_1		;letter ==81 to Q
000184 f409                      	brne CHECKR1
                                 TO_WAIT_Q_1:
000185 c074                      	rjmp WAIT_Q_1
                                 CHECKR1:
000186 3502                      	cpi mpr, 82				;
000187 f009                      	breq TO_WAIT_R_1		;letter ==82 to R
000188 f409                      	brne CHECKS1
                                 TO_WAIT_R_1:
000189 c076                      	rjmp WAIT_R_1
                                 CHECKS1:
00018a 3503                      	cpi mpr, 83				;
00018b f009                      	breq TO_WAIT_S_1		;letter ==83 to S
00018c f409                      	brne CHECKT1
                                 TO_WAIT_S_1:
00018d c077                      	rjmp WAIT_S_1
                                 
                                 CHECKT1:
00018e 3504                      	cpi mpr, 84				;
00018f f009                      	breq TO_WAIT_T_1		;letter ==84 to T
000190 f409                      	brne CHECKU1
                                 TO_WAIT_T_1:
000191 c078                      	rjmp WAIT_T_1
                                 CHECKU1:
000192 3505                      	cpi mpr, 85				;
000193 f009                      	breq TO_WAIT_U_1		;letter ==85 to U
000194 f409                      	brne CHECKV1
                                 TO_WAIT_U_1:
000195 c077                      	rjmp WAIT_U_1
                                 CHECKV1:
000196 3506                      	cpi mpr, 86				;
000197 f009                      	breq TO_WAIT_V_1		;letter ==86 to V
000198 f409                      	brne CHECKW1
                                 TO_WAIT_V_1:
000199 c078                      	rjmp WAIT_V_1
                                 CHECKW1:
00019a 3507                      	cpi mpr, 87				;
00019b f009                      	breq TO_WAIT_W_1		;letter ==87 to W
00019c f409                      	brne CHECKX1
                                 TO_WAIT_W_1:
00019d c07a                      	rjmp WAIT_W_1
                                 CHECKX1:
00019e 3508                      	cpi mpr, 88				;
00019f f009                      	breq TO_WAIT_X_1		;letter ==88 to X
0001a0 f409                      	brne CHECKY1
                                 TO_WAIT_X_1:
0001a1 c07b                      	rjmp WAIT_X_1
                                 CHECKY1:
0001a2 3509                      	cpi mpr, 89				;
0001a3 f009                      	breq TO_WAIT_Y_1		;letter ==89 to Y
0001a4 f409                      	brne CHECKZ1
                                 TO_WAIT_Y_1:
0001a5 c07d                      	rjmp WAIT_Y_1
                                 CHECKZ1:
0001a6 350a                      	cpi mpr, 90				;
0001a7 f001                      	breq TO_WAIT_Z_1		;letter ==90 to Z
                                 TO_WAIT_Z_1:
0001a8 c080                      	rjmp WAIT_Z_1
                                 ;MORSE CODE	
                                 WAIT_A_1:
0001a9 d187                      	rcall WAIT_DOT_1
0001aa d191                      	rcall WAIT_DASH_1
0001ab d1c2                      	rcall WAIT_3sec
0001ac c082                      	rjmp NEXT
                                 WAIT_B_1:
0001ad d18e                      	rcall WAIT_DASH_1
0001ae d182                      	rcall WAIT_DOT_1
0001af d181                      	rcall WAIT_DOT_1
0001b0 d180                      	rcall WAIT_DOT_1
0001b1 d1bc                      	rcall WAIT_3sec
0001b2 c07c                      	rjmp NEXT
                                 WAIT_C_1:
0001b3 d188                      	rcall WAIT_DASH_1
0001b4 d17c                      	rcall WAIT_DOT_1
0001b5 d186                      	rcall WAIT_DASH_1
0001b6 d17a                      	rcall WAIT_DOT_1
0001b7 d1b6                      	rcall WAIT_3sec
0001b8 c076                      	rjmp NEXT
                                 WAIT_D_1:
0001b9 d182                      	rcall WAIT_DASH_1
0001ba d176                      	rcall WAIT_DOT_1
0001bb d175                      	rcall WAIT_DOT_1
0001bc d1b1                      	rcall WAIT_3sec
0001bd c071                      	rjmp NEXT
                                 WAIT_E_1:
0001be d172                      	rcall WAIT_DOT_1
0001bf d1ae                      	rcall WAIT_3sec
0001c0 c06e                      	rjmp NEXT
                                 WAIT_F_1:
0001c1 d16f                      	rcall WAIT_DOT_1
0001c2 d16e                      	rcall WAIT_DOT_1
0001c3 d178                      	rcall WAIT_DASH_1
0001c4 d16c                      	rcall WAIT_DOT_1
0001c5 d1a8                      	rcall WAIT_3sec
0001c6 c068                      	rjmp NEXT
                                 WAIT_G_1:
0001c7 d174                      	rcall WAIT_DASH_1
0001c8 d173                      	rcall WAIT_DASH_1
0001c9 d167                      	rcall WAIT_DOT_1
0001ca d1a3                      	rcall WAIT_3sec
0001cb c063                      	rjmp NEXT
                                 WAIT_H_1:
0001cc d164                      	rcall WAIT_DOT_1
0001cd d163                      	rcall WAIT_DOT_1
0001ce d162                      	rcall WAIT_DOT_1
0001cf d161                      	rcall WAIT_DOT_1
0001d0 d19d                      	rcall WAIT_3sec
0001d1 c05d                      	rjmp NEXT
                                 WAIT_I_1:
0001d2 d15e                      	rcall WAIT_DOT_1
0001d3 d15d                      	rcall WAIT_DOT_1
0001d4 d199                      	rcall WAIT_3sec
0001d5 c059                      	rjmp NEXT
                                 WAIT_J_1:
0001d6 d15a                      	rcall WAIT_DOT_1
0001d7 d164                      	rcall WAIT_DASH_1
0001d8 d163                      	rcall WAIT_DASH_1
0001d9 d162                      	rcall WAIT_DASH_1
0001da d193                      	rcall WAIT_3sec
0001db c053                      	rjmp NEXT
                                 WAIT_K_1:
0001dc d15f                      	rcall WAIT_DASH_1
0001dd d153                      	rcall WAIT_DOT_1
0001de d15d                      	rcall WAIT_DASH_1
0001df d18e                      	rcall WAIT_3sec
0001e0 c04e                      	rjmp NEXT
                                 WAIT_L_1:
0001e1 d14f                      	rcall WAIT_DOT_1
0001e2 d159                      	rcall WAIT_DASH_1
0001e3 d14d                      	rcall WAIT_DOT_1
0001e4 d14c                      	rcall WAIT_DOT_1
0001e5 d188                      	rcall WAIT_3sec
0001e6 c048                      	rjmp NEXT
                                 WAIT_M_1:
0001e7 d154                      	rcall WAIT_DASH_1
0001e8 d153                      	rcall WAIT_DASH_1
0001e9 d184                      	rcall WAIT_3sec	
0001ea c044                      	rjmp NEXT
                                 WAIT_N_1:
0001eb d150                      	rcall WAIT_DASH_1
0001ec d144                      	rcall WAIT_DOT_1
0001ed d180                      	rcall WAIT_3sec	
0001ee c040                      	rjmp NEXT		
                                 WAIT_O_1:
0001ef d14c                      	rcall WAIT_DASH_1
0001f0 d14b                      	rcall WAIT_DASH_1
0001f1 d14a                      	rcall WAIT_DASH_1
0001f2 d17b                      	rcall WAIT_3sec	
0001f3 c03b                      	rjmp NEXT
                                 WAIT_P_1:
0001f4 d13c                      	rcall WAIT_DOT_1
0001f5 d146                      	rcall WAIT_DASH_1
0001f6 d145                      	rcall WAIT_DASH_1
0001f7 d139                      	rcall WAIT_DOT_1
0001f8 d175                      	rcall WAIT_3sec	
0001f9 c035                      	rjmp NEXT
                                 WAIT_Q_1:
0001fa d141                      	rcall WAIT_DASH_1
0001fb d140                      	rcall WAIT_DASH_1
0001fc d134                      	rcall WAIT_DOT_1
0001fd d13e                      	rcall WAIT_DASH_1
0001fe d16f                      	rcall WAIT_3sec	
0001ff c02f                      	rjmp NEXT
                                 WAIT_R_1:
000200 d130                      	rcall WAIT_DOT_1
000201 d13a                      	rcall WAIT_DASH_1
000202 d12e                      	rcall WAIT_DOT_1
000203 d16a                      	rcall WAIT_3sec	
000204 c02a                      	rjmp NEXT
                                 WAIT_S_1:
000205 d12b                      	rcall WAIT_DOT_1
000206 d12a                      	rcall WAIT_DOT_1
000207 d129                      	rcall WAIT_DOT_1
000208 d165                      	rcall WAIT_3sec	
000209 c025                      	rjmp NEXT
                                 WAIT_T_1:
00020a d131                      	rcall WAIT_DASH_1
00020b d162                      	rcall WAIT_3sec	
00020c c022                      	rjmp NEXT
                                 WAIT_U_1:
00020d d123                      	rcall WAIT_DOT_1
00020e d122                      	rcall WAIT_DOT_1
00020f d12c                      	rcall WAIT_DASH_1
000210 d15d                      	rcall WAIT_3sec	
000211 c01d                      	rjmp NEXT		
                                 WAIT_V_1:
000212 d11e                      	rcall WAIT_DOT_1
000213 d11d                      	rcall WAIT_DOT_1
000214 d11c                      	rcall WAIT_DOT_1
000215 d126                      	rcall WAIT_DASH_1
000216 d157                      	rcall WAIT_3sec	
000217 c017                      	rjmp NEXT	
                                 WAIT_W_1:
000218 d118                      	rcall WAIT_DOT_1
000219 d122                      	rcall WAIT_DASH_1
00021a d121                      	rcall WAIT_DASH_1
00021b d152                      	rcall WAIT_3sec	
00021c c012                      	rjmp NEXT		
                                 WAIT_X_1:
00021d d11e                      	rcall WAIT_DASH_1
00021e d112                      	rcall WAIT_DOT_1
00021f d111                      	rcall WAIT_DOT_1
000220 d11b                      	rcall WAIT_DASH_1
000221 d14c                      	rcall WAIT_3sec	
000222 c00c                      	rjmp NEXT
                                 WAIT_Y_1:
000223 d118                      	rcall WAIT_DASH_1
000224 d10c                      	rcall WAIT_DOT_1
000225 d116                      	rcall WAIT_DASH_1
000226 d115                      	rcall WAIT_DASH_1
000227 d146                      	rcall WAIT_3sec	
000228 c006                      	rjmp NEXT
                                 WAIT_Z_1:
000229 d112                      	rcall WAIT_DASH_1
00022a d111                      	rcall WAIT_DASH_1
00022b d105                      	rcall WAIT_DOT_1
00022c d104                      	rcall WAIT_DOT_1
00022d d140                      	rcall WAIT_3sec	
00022e c000                      	rjmp NEXT
                                 
                                 NEXT:
00022f 958a                      	dec BIT
000230 cf08                      	rjmp TO_WAIT_1
                                 
                                 NEXT_200:
000231 958a                      	dec BIT
000232 cf09                      	rjmp TO_WAIT_200
                                 
                                 ;200ms
                                 WAIT_200:					
000233 910d                      	ld mpr, X+			;move the LETTER TO mpr
000234 3401                      	cpi mpr, 65				;compare the letter
000235 f009                      	breq TO_WAIT_A_0		;letter == 65 to A 
000236 f409                      	brne CHECKB0
                                 TO_WAIT_A_0:
000237 c063                      	rjmp WAIT_A_0
                                 CHECKB0:
000238 3402                      	cpi mpr, 66				;
000239 f009                      	breq TO_WAIT_B_0		;letter ==66 to B
00023a f409                      	brne CHECKC0
                                 TO_WAIT_B_0:
00023b c063                      	rjmp WAIT_B_0
                                 CHECKC0:
00023c 3403                      	cpi mpr, 67				;
00023d f009                      	breq TO_WAIT_C_0		;letter ==67 to C
00023e f409                      	brne CHECKD0
                                 TO_WAIT_C_0:
00023f c065                      	rjmp WAIT_C_0
                                 CHECKD0:
000240 3404                      	cpi mpr, 68				;
000241 f009                      	breq TO_WAIT_D_0		;letter ==68 to D
000242 f409                      	brne CHECKE0
                                 TO_WAIT_D_0:
000243 c067                      	rjmp WAIT_D_0
                                 CHECKE0:
000244 3405                      	cpi mpr, 69				;
000245 f009                      	breq TO_WAIT_E_0		;letter ==69 to E
000246 f409                      	brne CHECKF0
                                 TO_WAIT_E_0:
000247 c068                      	rjmp WAIT_E_0
                                 CHECKF0:
000248 3406                      	cpi mpr, 70				;
000249 f009                      	breq TO_WAIT_F_0		;letter ==70 to F
00024a f409                      	brne CHECKG0
                                 TO_WAIT_F_0:
00024b c067                      	rjmp WAIT_F_0
                                 CHECKG0:
00024c 3407                      	cpi mpr, 71				;
00024d f009                      	breq TO_WAIT_G_0		;letter ==71 to G
00024e f409                      	brne CHECKH0
                                 TO_WAIT_G_0:
00024f c069                      	rjmp WAIT_G_0
                                 CHECKH0:
000250 3408                      	cpi mpr, 72				;
000251 f009                      	breq TO_WAIT_H_0		;letter ==72 to H
000252 f409                      	brne CHECKI0
                                 TO_WAIT_H_0:
000253 c06a                      	rjmp WAIT_H_0
                                 CHECKI0:
000254 3409                      	cpi mpr, 73				;
000255 f009                      	breq TO_WAIT_I_0		;letter ==73 to I
000256 f409                      	brne CHECKJ0
                                 TO_WAIT_I_0:
000257 c06c                      	rjmp WAIT_I_0
                                 CHECKJ0:
000258 340a                      	cpi mpr, 74				;		
000259 f009                      	breq TO_WAIT_J_0		;letter ==74 to J
00025a f409                      	brne CHECKK0
                                 TO_WAIT_J_0:
00025b c06c                      	rjmp WAIT_J_0
                                 CHECKK0:
00025c 340b                      	cpi mpr, 75				;
00025d f009                      	breq TO_WAIT_K_0		;letter ==75 to K
00025e f409                      	brne CHECKL0
                                 TO_WAIT_K_0:
00025f c06e                      	rjmp WAIT_K_0
                                 CHECKL0:
000260 340c                      	cpi mpr, 76				;		
000261 f009                      	breq TO_WAIT_L_0		;letter ==76 to L
000262 f409                      	brne CHECKM0
                                 TO_WAIT_L_0:
000263 c06f                      	rjmp WAIT_L_0
                                 CHECKM0:
000264 340d                      	cpi mpr, 77				;
000265 f009                      	breq TO_WAIT_M_0		;letter ==77 to M
000266 f409                      	brne CHECKN0
                                 TO_WAIT_M_0:
000267 c071                      	rjmp WAIT_M_0
                                 CHECKN0:
000268 340e                      	cpi mpr, 78				;
000269 f009                      	breq TO_WAIT_N_0		;letter ==78 to N
00026a f409                      	brne CHECKO0
                                 TO_WAIT_N_0:
00026b c071                      	rjmp WAIT_N_0
                                 CHECKO0:
00026c 340f                      	cpi mpr, 79				;	
00026d f009                      	breq TO_WAIT_O_0		;letter ==79 to O
00026e f409                      	brne CHECKP0
                                 TO_WAIT_O_0:
00026f c071                      	rjmp WAIT_O_0
                                 CHECKP0:
000270 3500                      	cpi mpr, 80				;
000271 f009                      	breq TO_WAIT_P_0		;letter ==80 to P
000272 f409                      	brne CHECKQ0
                                 TO_WAIT_P_0:
000273 c072                      	rjmp WAIT_P_0
                                 CHECKQ0:
000274 3501                      	cpi mpr, 81				;
000275 f009                      	breq TO_WAIT_Q_0		;letter ==81 to Q
000276 f409                      	brne CHECKR0
                                 TO_WAIT_Q_0:
000277 c074                      	rjmp WAIT_Q_0
                                 CHECKR0:
000278 3502                      	cpi mpr, 82				;
000279 f009                      	breq TO_WAIT_R_0		;letter ==82 to R
00027a f409                      	brne CHECKS0
                                 TO_WAIT_R_0:
00027b c076                      	rjmp WAIT_R_0
                                 CHECKS0:
00027c 3503                      	cpi mpr, 83				;
00027d f009                      	breq TO_WAIT_S_0		;letter ==83 to S
00027e f409                      	brne CHECKT0
                                 TO_WAIT_S_0:
00027f c077                      	rjmp WAIT_S_0
                                 CHECKT0:
000280 3504                      	cpi mpr, 84				;
000281 f009                      	breq TO_WAIT_T_0		;letter ==84 to T
000282 f409                      	brne CHECKU0
                                 TO_WAIT_T_0:
000283 c078                      	rjmp WAIT_T_0
                                 CHECKU0:
000284 3505                      	cpi mpr, 85				;
000285 f009                      	breq TO_WAIT_U_0		;letter ==85 to U
000286 f409                      	brne CHECKV0
                                 TO_WAIT_U_0:
000287 c077                      	rjmp WAIT_U_0
                                 CHECKV0:
000288 3506                      	cpi mpr, 86				;
000289 f009                      	breq TO_WAIT_V_0		;letter ==86 to V
00028a f409                      	brne CHECKW0
                                 TO_WAIT_V_0:
00028b c078                      	rjmp WAIT_V_0
                                 CHECKW0:
00028c 3507                      	cpi mpr, 87				;
00028d f009                      	breq TO_WAIT_W_0		;letter ==87 to W
00028e f409                      	brne CHECKX0
                                 TO_WAIT_W_0:
00028f c07a                      	rjmp WAIT_W_0
                                 CHECKX0:
000290 3508                      	cpi mpr, 88				;
000291 f009                      	breq TO_WAIT_X_0		;letter ==88 to X
000292 f409                      	brne CHECKY0
                                 TO_WAIT_X_0:
000293 c07b                      	rjmp WAIT_X_0
                                 CHECKY0:
000294 3509                      	cpi mpr, 89				;
000295 f009                      	breq TO_WAIT_Y_0		;letter ==89 to Y
000296 f409                      	brne CHECKZ0
                                 TO_WAIT_Y_0:
000297 c07d                      	rjmp WAIT_Y_0
                                 CHECKZ0:
000298 350a                      	cpi mpr, 90				;
000299 f001                      	breq TO_WAIT_Z_0		;letter ==90 to Z
                                 TO_WAIT_Z_0:
00029a c080                      	rjmp WAIT_Z_0
                                 
                                 ;MORSE CODE	
                                 WAIT_A_0:
00029b d0ab                      	rcall WAIT_DOT_200
00029c d0b4                      	rcall WAIT_DASH_200
00029d d0f6                      	rcall WAIT_600ms
00029e cf92                      	rjmp NEXT_200
                                 WAIT_B_0:
00029f d0b1                      	rcall WAIT_DASH_200
0002a0 d0a6                      	rcall WAIT_DOT_200
0002a1 d0a5                      	rcall WAIT_DOT_200
0002a2 d0a4                      	rcall WAIT_DOT_200
0002a3 d0f0                      	rcall WAIT_600ms
0002a4 cf8c                      	rjmp NEXT_200
                                 WAIT_C_0:
0002a5 d0ab                      	rcall WAIT_DASH_200
0002a6 d0a0                      	rcall WAIT_DOT_200
0002a7 d0a9                      	rcall WAIT_DASH_200
0002a8 d09e                      	rcall WAIT_DOT_200
0002a9 d0ea                      	rcall WAIT_600ms
0002aa cf86                      	rjmp NEXT_200
                                 WAIT_D_0:
0002ab d0a5                      	rcall WAIT_DASH_200
0002ac d09a                      	rcall WAIT_DOT_200
0002ad d099                      	rcall WAIT_DOT_200
0002ae d0e5                      	rcall WAIT_600ms
0002af cf81                      	rjmp NEXT_200
                                 WAIT_E_0:
0002b0 d096                      	rcall WAIT_DOT_200
0002b1 d0e2                      	rcall WAIT_600ms
0002b2 cf7e                      	rjmp NEXT_200
                                 WAIT_F_0:
0002b3 d093                      	rcall WAIT_DOT_200
0002b4 d092                      	rcall WAIT_DOT_200
0002b5 d09b                      	rcall WAIT_DASH_200
0002b6 d090                      	rcall WAIT_DOT_200
0002b7 d0dc                      	rcall WAIT_600ms
0002b8 cf78                      	rjmp NEXT_200
                                 WAIT_G_0:
0002b9 d097                      	rcall WAIT_DASH_200
0002ba d096                      	rcall WAIT_DASH_200
0002bb d08b                      	rcall WAIT_DOT_200
0002bc d0d7                      	rcall WAIT_600ms
0002bd cf73                      	rjmp NEXT_200
                                 WAIT_H_0:
0002be d088                      	rcall WAIT_DOT_200
0002bf d087                      	rcall WAIT_DOT_200
0002c0 d086                      	rcall WAIT_DOT_200
0002c1 d085                      	rcall WAIT_DOT_200
0002c2 d0d1                      	rcall WAIT_600ms
0002c3 cf6d                      	rjmp NEXT_200
                                 WAIT_I_0:
0002c4 d082                      	rcall WAIT_DOT_200
0002c5 d081                      	rcall WAIT_DOT_200
0002c6 d0cd                      	rcall WAIT_600ms
0002c7 cf69                      	rjmp NEXT_200
                                 WAIT_J_0:
0002c8 d07e                      	rcall WAIT_DOT_200
0002c9 d087                      	rcall WAIT_DASH_200
0002ca d086                      	rcall WAIT_DASH_200
0002cb d085                      	rcall WAIT_DASH_200
0002cc d0c7                      	rcall WAIT_600ms
0002cd cf63                      	rjmp NEXT_200
                                 WAIT_K_0:
0002ce d082                      	rcall WAIT_DASH_200
0002cf d077                      	rcall WAIT_DOT_200
0002d0 d080                      	rcall WAIT_DASH_200
0002d1 d0c2                      	rcall WAIT_600ms
0002d2 cf5e                      	rjmp NEXT_200
                                 WAIT_L_0:
0002d3 d073                      	rcall WAIT_DOT_200
0002d4 d07c                      	rcall WAIT_DASH_200
0002d5 d071                      	rcall WAIT_DOT_200
0002d6 d070                      	rcall WAIT_DOT_200
0002d7 d0bc                      	rcall WAIT_600ms
0002d8 cf58                      	rjmp NEXT_200
                                 WAIT_M_0:
0002d9 d077                      	rcall WAIT_DASH_200
0002da d076                      	rcall WAIT_DASH_200
0002db d0b8                      	rcall WAIT_600ms
0002dc cf54                      	rjmp NEXT_200
                                 WAIT_N_0:
0002dd d073                      	rcall WAIT_DASH_200
0002de d068                      	rcall WAIT_DOT_200
0002df d0b4                      	rcall WAIT_600ms	
0002e0 cf50                      	rjmp NEXT_200		
                                 WAIT_O_0:
0002e1 d06f                      	rcall WAIT_DASH_200
0002e2 d06e                      	rcall WAIT_DASH_200
0002e3 d06d                      	rcall WAIT_DASH_200
0002e4 d0af                      	rcall WAIT_600ms	
0002e5 cf4b                      	rjmp NEXT_200
                                 WAIT_P_0:
0002e6 d060                      	rcall WAIT_DOT_200
0002e7 d069                      	rcall WAIT_DASH_200
0002e8 d068                      	rcall WAIT_DASH_200
0002e9 d05d                      	rcall WAIT_DOT_200
0002ea d0a9                      	rcall WAIT_600ms	
0002eb cf45                      	rjmp NEXT_200
                                 WAIT_Q_0:
0002ec d064                      	rcall WAIT_DASH_200
0002ed d063                      	rcall WAIT_DASH_200
0002ee d058                      	rcall WAIT_DOT_200
0002ef d061                      	rcall WAIT_DASH_200
0002f0 d0a3                      	rcall WAIT_600ms	
0002f1 cf3f                      	rjmp NEXT_200
                                 WAIT_R_0:
0002f2 d054                      	rcall WAIT_DOT_200
0002f3 d05d                      	rcall WAIT_DASH_200
0002f4 d052                      	rcall WAIT_DOT_200
0002f5 d09e                      	rcall WAIT_600ms
0002f6 cf3a                      	rjmp NEXT_200
                                 WAIT_S_0:
0002f7 d04f                      	rcall WAIT_DOT_200
0002f8 d04e                      	rcall WAIT_DOT_200
0002f9 d04d                      	rcall WAIT_DOT_200
0002fa d099                      	rcall WAIT_600ms	
0002fb cf35                      	rjmp NEXT_200
                                 WAIT_T_0:
0002fc d054                      	rcall WAIT_DASH_200
0002fd d096                      	rcall WAIT_600ms	
0002fe cf32                      	rjmp NEXT_200
                                 WAIT_U_0:
0002ff d047                      	rcall WAIT_DOT_200
000300 d046                      	rcall WAIT_DOT_200
000301 d04f                      	rcall WAIT_DASH_200
000302 d091                      	rcall WAIT_600ms
000303 cf2d                      	rjmp NEXT_200		
                                 WAIT_V_0:
000304 d042                      	rcall WAIT_DOT_200
000305 d041                      	rcall WAIT_DOT_200
000306 d040                      	rcall WAIT_DOT_200
000307 d049                      	rcall WAIT_DASH_200
000308 d08b                      	rcall WAIT_600ms
000309 cf27                      	rjmp NEXT_200	
                                 WAIT_W_0:
00030a d03c                      	rcall WAIT_DOT_200
00030b d045                      	rcall WAIT_DASH_200
00030c d044                      	rcall WAIT_DASH_200
00030d d086                      	rcall WAIT_600ms
00030e cf22                      	rjmp NEXT_200		
                                 WAIT_X_0:
00030f d041                      	rcall WAIT_DASH_200
000310 d036                      	rcall WAIT_DOT_200
000311 d035                      	rcall WAIT_DOT_200
000312 d03e                      	rcall WAIT_DASH_200
000313 d080                      	rcall WAIT_600ms	
000314 cf1c                      	rjmp NEXT_200
                                 WAIT_Y_0:
000315 d03b                      	rcall WAIT_DASH_200
000316 d030                      	rcall WAIT_DOT_200
000317 d039                      	rcall WAIT_DASH_200
000318 d038                      	rcall WAIT_DASH_200
000319 d07a                      	rcall WAIT_600ms
00031a cf16                      	rjmp NEXT_200
                                 WAIT_Z_0:
00031b d035                      	rcall WAIT_DASH_200
00031c d034                      	rcall WAIT_DASH_200
00031d d029                      	rcall WAIT_DOT_200
00031e d028                      	rcall WAIT_DOT_200
00031f d074                      	rcall WAIT_600ms	
000320 cf10                      	rjmp NEXT_200
                                 
                                 
                                 ACTIVE_END:
000321 98c4                      	cbi PORTB, PB4	;turn off OC0
000322 98c5                      	cbi PORTB, PB5	;turn off OC0
000323 98c6                      	cbi PORTB, PB6	;turn off OC0
000324 98c7                      	cbi PORTB, PB7	;turn off OC0
000325 cd20                      	rjmp INIT
                                 
000326 91ff                      	pop ZH	;restore Z register
000327 91ef                      	pop ZL	;
000328 91df                      	pop YH	;restore Y register
000329 91cf                      	pop YL	;
00032a 91bf                      	pop XH	;restore X register
00032b 91af                      	pop XL	;
00032c 910f                      	pop mpr			;restore mpr
00032d bf0f                      	out SREG, mpr	;restore the status register	
00032e 911f                      	pop	wait		; Save wait register
00032f 910f                      	pop mpr
                                 
000330 9508                      	ret						; End a function with RET
                                 
                                 ;-----------------------------------------------------------
                                 ; Func: WAIT_DOT_1
                                 ; Desc: set the time for DOT of UserMode:	.DB	0x01, 0x00
                                 ;-----------------------------------------------------------
                                 WAIT_DOT_1:
                                 
000331 9ac4                      	sbi PORTB, PB4
000332 9ac5                      	sbi PORTB, PB5	;TURN ON OC0
000333 9ac6                      	sbi PORTB, PB6	;TURN ON OC0
000334 9ac7                      	sbi PORTB, PB7	;turn on OC0
000335 d025                      	rcall WAIT_1sec	;wait 1 second
000336 9ac4                      	sbi PORTB, PB4
000337 98c5                      	cbi PORTB, PB5	;turn off OC0
000338 98c6                      	cbi PORTB, PB6	;turn off OC0
000339 98c7                      	cbi PORTB, PB7	;turn off OC0
00033a d020                      	rcall WAIT_1sec	;wait 1 second
00033b 9508                      	ret
                                 
                                 ;-----------------------------------------------------------
                                 ; Func: WAIT_DASH_1
                                 ; Desc: set the time for DOT of UserMode:	.DB	0x01, 0x00
                                 ;-----------------------------------------------------------
                                 WAIT_DASH_1:
00033c 9ac4                      	sbi PORTB, PB4
00033d 9ac5                      	sbi PORTB, PB5	;TURN ON OC0
00033e 9ac6                      	sbi PORTB, PB6	;TURN ON OC0
00033f 9ac7                      	sbi PORTB, PB7	;turn on OC0
000340 d02d                      	rcall WAIT_3sec	;wait 1 second
000341 9ac4                      	sbi PORTB,PB4
000342 98c5                      	cbi PORTB, PB5	;turn off OC0
000343 98c6                      	cbi PORTB, PB6	;turn off OC0
000344 98c7                      	cbi PORTB, PB7	;turn off OC0
000345 d015                      	rcall WAIT_1sec	;wait 1 second
000346 9508                      	ret
                                 
                                 ;-----------------------------------------------------------
                                 ; Func: WAIT_DOT_200
                                 ; Desc: set the time for DOT of UserMode:	.DB	0x00, 0x00
                                 ;-----------------------------------------------------------
                                 WAIT_DOT_200:
000347 9ac4                      	sbi PORTB, PB4
000348 9ac5                      	sbi PORTB, PB5	;TURN ON OC0
000349 9ac6                      	sbi PORTB, PB6	;TURN ON OC0
00034a 9ac7                      	sbi PORTB, PB7	;turn on OC0
00034b d035                      	rcall WAIT_200ms	;wait 200 ms
00034c 98c5                      	cbi PORTB, PB5	;turn off OC0
00034d 98c6                      	cbi PORTB, PB6	;turn off OC0
00034e 98c7                      	cbi PORTB, PB7	;turn off OC0
00034f d031                      	rcall WAIT_200ms	;wait 200 ms
000350 9508                      	ret
                                 
                                 ;-----------------------------------------------------------
                                 ; Func: WAIT_DASH_200
                                 ; Desc: set the time for DOT of UserMode:	.DB	0x01, 0x00
                                 ;-----------------------------------------------------------
                                 WAIT_DASH_200:
000351 9ac4                      	sbi PORTB, PB4
000352 9ac5                      	sbi PORTB, PB5	;TURN ON OC0
000353 9ac6                      	sbi PORTB, PB6	;TURN ON OC0
000354 9ac7                      	sbi PORTB, PB7	;turn on OC0
000355 d03e                      	rcall WAIT_600ms	;wait 600ms
000356 98c5                      	cbi PORTB, PB5	;turn off OC0
000357 98c6                      	cbi PORTB, PB6	;turn off OC0
000358 98c7                      	cbi PORTB, PB7	;turn off OC0
000359 d027                      	rcall WAIT_200ms;wait 200ms
00035a 9508                      	ret
                                 
                                 ;-----------------------------------------------------------
                                 ; Func: WAIT_1sec
                                 ; Desc: set the time for UserMode:	.DB	0x01, 0x00
                                 ; Reference: ECE375 TEXTBOOK P160
                                 ;-----------------------------------------------------------
                                 WAIT_1sec:
                                 	;Timer/Counter		
00035b 9abc                      	sbi DDRB, PB4
00035c 9abd                      	sbi DDRB, PB5				;Turn on OC0
00035d 9abe                      	sbi DDRB, PB6				;turn on OC0
00035e 9abf                      	sbi DDRB, PB7				;turn on OC0
00035f e000                      	ldi mpr, 0b00000000			;active normal mode, OC0 disconnected
000360 bd0f                      	out TCCR1A, mpr				; set the prescalar
000361 e004                      	ldi mpr, 0b00000100		; active normal mode, OC0 disconnected
000362 bd0e                      	out TCCR1B, mpr				;set the pre scalar to 256
                                 
000363 e021                      	ldi		count, 1			;load loop count=1
                                 
                                 WAIT_10msec1:
000364 e694                      	ldi		dataptr, 100		;loade value for delay
000365 bd9c                      	out		TCNT1L, dataptr		;wait for TCNT1L
                                 CHECK_1sec:
000366 b796                      	in		dataptr, TIFR		;read in TIFR
000367 7094                      	andi	dataptr, 0b00000100	; check if its set
000368 f3e9                      	breq	CHECK_1sec			; loop iF TOV1 not set
000369 e094                      	ldi		dataptr, 0b00000100	;Reset TOV1
00036a bf96                      	out 	TIFR, dataptr		;note - write 1 to reset
00036b 952a                      	dec		count				;decrement count
00036c f7b9                      	brne	WAIT_10msec1			;loop if count to not equal to 0
00036d 9508                      	ret
                                 
                                 ;-----------------------------------------------------------
                                 ; Func: WAIT_3sec
                                 ; Desc: set the time for UserMode:	.DB	0x01, 0x00
                                 ; Reference: ECE375 TEXTBOOK P160
                                 ;-----------------------------------------------------------
                                 WAIT_3sec:
                                 	;Timer/Counter		
00036e 9abc                      	sbi DDRB, PB4
00036f 9abd                      	sbi DDRB, PB5				;Turn on OC0
000370 9abe                      	sbi DDRB, PB6				;turn on OC0
000371 9abf                      	sbi DDRB, PB7				;turn on OC0
000372 e000                      	ldi mpr, 0b00000000			;active normal mode, OC0 disconnected
000373 bd0f                      	out TCCR1A, mpr				; set the prescalar
000374 e004                      	ldi mpr, 0b00000100		; active normal mode, OC0 disconnected
000375 bd0e                      	out TCCR1B, mpr				;set the pre scalar to 256
                                 
000376 e023                      	ldi		count, 3			;load loop count=100
                                 WAIT_10msec:
000377 e694                      	ldi		dataptr, 100		;loade value for delay(30*10)
000378 bd9c                      	out		TCNT1L, dataptr		;wait for TCNT1L
                                 CHECK_3sec:
000379 b796                      	in		dataptr, TIFR		;read in TIFR
00037a 7094                      	andi	dataptr, 0b00000100	; check if its set
00037b f3e9                      	breq	CHECK_3sec			; loop iF TOV1 not set
00037c e094                      	ldi		dataptr, 0b00000100	;Reset TOV1
00037d bf96                      	out 	TIFR, dataptr		;note - write 1 to reset
00037e 952a                      	dec		count				;decrement count
00037f f7b9                      	brne	WAIT_10msec			;loop if count to not equal to 0
000380 9508                      	ret
                                 
                                 ;-----------------------------------------------------------
                                 ; Func: WAIT_200ms
                                 ; Desc: set the time for UserMode:	.DB	0x00, 0x00
                                 ; Reference: ECE375 TEXTBOOK P160
                                 ;-----------------------------------------------------------
                                 WAIT_200ms:
                                 	;Timer/Counter
000381 9abc                      	sbi DDRB, PB4
000382 9abd                      	sbi DDRB, PB5				;Turn on OC0
000383 9abe                      	sbi	DDRB, PB6				;Turn on OC0
000384 9abf                      	sbi DDRB, PB7				;turn on OC0
000385 e000                      	ldi mpr, 0b00000000			;active normal mode, OC0 disconnected
000386 bd0f                      	out TCCR1A, mpr				;set the prescalar
000387 e002                      	ldi mpr, 0b00000010			;active normal mode, OC0 disconnected
000388 bd0e                      	out TCCR1B, mpr				;set the presalar 8
                                 
000389 e026                      	ldi		count, 6		;load loop count=100
                                 WAIT_10msec2:
00038a e694                      	ldi		dataptr, 100		;loade value for delay(30*10)
00038b bd9c                      	out		TCNT1L, dataptr		;wait for TCNT1L
                                 CHECK_200ms:
00038c b796                      	in		dataptr, TIFR		;read in TIFR
00038d 7094                      	andi	dataptr, 0b00000100	; check if its set
00038e f3e9                      	breq	CHECK_200ms			; loop iF TOV1 not set
00038f e094                      	ldi		dataptr, 0b00000100	;Reset TOV1
000390 bf96                      	out 	TIFR, dataptr		;note - write 1 to reset
000391 952a                      	dec		count				;decrement count
000392 f7b9                      	brne	WAIT_10msec2		;loop if count to not equal to 0
000393 9508                      	ret
                                 
                                 ;-----------------------------------------------------------
                                 ; Func: WAIT_600ms
                                 ; Desc: set the time for UserMode:	.DB	0x00, 0x00
                                 ; Reference: ECE375 TEXTBOOK P160
                                 ;-----------------------------------------------------------
                                 WAIT_600ms:	
                                 	;Timer/Counter
000394 9abc                      	sbi DDRB, PB4
000395 9abd                      	sbi DDRB, PB5				;Turn on OC0
000396 9abe                      	sbi	DDRB, PB6				;Turn on OC0
000397 9abf                      	sbi DDRB, PB7				;turn on OC0
000398 e000                      	ldi mpr, 0b00000000			;active normal mode, OC0 disconnected
000399 bd0f                      	out TCCR1A, mpr				;set the prescalar
00039a e002                      	ldi mpr, 0b00000010			;active normal mode, OC0 disconnected
00039b bd0e                      	out TCCR1B, mpr				;set the presalar 8
                                 
00039c e122                      	ldi		count, 18			;load loop count=100
                                 WAIT_10msec6:
00039d e694                      	ldi		dataptr, 100		;loade value for delay(30*10)
00039e bd9c                      	out		TCNT1L, dataptr		;wait for TCNT1L
                                 CHECK_600ms:
00039f b796                      	in		dataptr, TIFR		;read in TIFR
0003a0 7094                      	andi	dataptr, 0b00000100	; check if its set
0003a1 f3e9                      	breq	CHECK_600ms			; loop iF TOV1 not set
0003a2 e094                      	ldi		dataptr, 0b00000100	;Reset TOV1
0003a3 bf96                      	out 	TIFR, dataptr		;note - write 1 to reset
0003a4 952a                      	dec		count				;decrement count
0003a5 f689                      	brne	WAIT_10msec		;loop if count to not equal to 0
0003a6 9508                      	ret
                                 ;----------------------------------------------------------------
                                 ; Sub:	Wait
                                 ; Desc:	A wait loop that is 16 + 159975*waitcnt cycles or roughly 
                                 ;		waitcnt*10ms.  Just initialize wait for the specific amount 
                                 ;		of time in 10ms intervals. Here is the general eqaution
                                 ;		for the number of clock cycles in the wait loop:
                                 ;			((3 * ilcnt + 3) * olcnt + 3) * waitcnt + 13 + call
                                 ;reference: lab1 code
                                 ;----------------------------------------------------------------
                                 Waitt:
                                 		;push save registers
0003a7 931f                      		push	wait			; Save wait register
0003a8 936f                      		push	r			; Save ilcnt register
0003a9 935f                      		push	q			; Save olcnt register
                                 
0003aa ee50                      Loop:	ldi		q, 224		; load olcnt register
0003ab ee6d                      OLoop:	ldi		r, 237		; load ilcnt register
0003ac 956a                      ILoop:	dec		r			; decrement ilcnt
0003ad f7f1                      		brne	ILoop			; Continue Inner Loop
0003ae 955a                      		dec		q			; decrement olcnt
0003af f7d9                      		brne	OLoop			; Continue Outer Loop
0003b0 951a                      		dec		wait			; Decrement wait 
0003b1 f7c1                      		brne	Loop			; Continue Wait loop	
                                 		
                                 		;pop restore registers
0003b2 915f                      		pop		q		; Restore olcnt register
0003b3 916f                      		pop		r		; Restore ilcnt register
0003b4 911f                      		pop		wait		; Restore wait register
0003b5 9508                      		ret					; Return from subroutine
                                 
                                 
                                 ;***********************************************************
                                 ;*	Stored Program Data
                                 ;***********************************************************
                                 STRING_LINE1:
0003b6 6557
0003b7 636c
0003b8 6d6f
0003b9 2165
0003ba 2020
0003bb 2020
0003bc 2020
0003bd 2020                      .DB  "Welcome!        "  ; Extra spaces added to make 16 bits
                                 STRING_END1:
                                 
                                 STRING_LINE2:
0003be 6c50
0003bf 6165
0003c0 6573
0003c1 7020
0003c2 6572
0003c3 7373
0003c4 5020
0003c5 3044                      .DB  "Please press PD0"  ; Extra spaces added to make 16 bits
                                 STRING_END2:
                                 
                                 STRING_LINE3:
0003c6 6e45
0003c7 6574
0003c8 2072
0003c9 6f77
0003ca 6472
0003cb 203a
0003cc 2020
0003cd 2020                      .DB "Enter word:     "  ; Extra spaces added to make 16 bits
                                 STRING_END3:
                                 
                                 ;***end of your code***end of your code***end of your code***end of your code***end of your code***
                                 ;******************************* Do not change below this point************************************
                                 ;******************************* Do not change below this point************************************
                                 ;******************************* Do not change below this point************************************
                                 
                                 
                                 ;***********************************************************
                                 ;*	Stored Program Data
                                 ;***********************************************************
                                 ; Contents of program memory will be changed during testing
                                 ; The label names are not changed
                                 
                                 ; If UserMode is 0x01, then one unit of time is 1 second
0003ce 0001                      UserMode:	.DB	0x01, 0x00
                                 ; You can ignore the second byte (it's only included so that there is an even number of bytes)
                                 
                                 ; If UserMode is 0x00, then one unit of time is 200 milliseconds
                                 ; This would look like the following:
                                 ;UserMode:	.DB	0x00, 0x00
                                 ; (again, ignore the second byte)
                                 
                                 ; UserMode will always be set to either 0x00 or 0x01
                                 
                                 
                                 ;***********************************************************
                                 ;*	Additional Program Includes
                                 ;***********************************************************
                                 .include "LCDDriver.asm"		; Include the LCD Driver from Lab 4
                                 
                                 ;*
                                 ;*	LCDDriver.asm	-	V2.0
                                 ;*
                                 ;*	Contains the neccessary functions to display text to a
                                 ;*	2 x 16 character LCD Display.  Additional functions
                                 ;*	include a conversion routine from an unsigned 8-bit
                                 ;*	binary number to and ASCII text string.
                                 ;*
                                 ;*	Version 2.0 - Added support for accessing the LCD 
                                 ;*		Display via the serial port. See version 1.0 for 
                                 ;*		accessing a memory mapped LCD display.
                                 ;*
                                 ;***********************************************************
                                 ;*
                                 ;*	 Author: David Zier
                                 ;*	   Date: March 17, 2003
                                 ;*	Company: TekBots(TM), Oregon State University - EECS
                                 ;*	Version: 2.0
                                 ;*
                                 ;***********************************************************
                                 ;*	Rev	Date	Name		Description
                                 ;*----------------------------------------------------------
                                 ;*	-	8/20/02	Zier		Initial Creation of Version 1.0
                                 ;*	A	3/7/03	Zier		V2.0 - Updated for USART LCD
                                 ;*
                                 ;*
                                 ;***********************************************************
                                 
                                 ;***********************************************************
                                 ;*	Internal Register Definitions and Constants
                                 ;*		NOTE: A register MUST be named 'mpr' in the Main Code
                                 ;*			It is recomended to use register r16.
                                 ;*		WARNING: Register r17-r22 are reserved and cannot be
                                 ;*			renamed outside of the LCD Driver functions. Doing
                                 ;*			so will damage the functionality of the LCD Driver
                                 ;***********************************************************
                                 .def	wait = r17				; Wait Loop Register
                                 .def	count = r18				; Character Counter
                                 .def	line = r19				; Line Select Register
                                 .def	type = r20				; LCD data type: Command or Text
                                 .def	q = r21					; Quotient for div10
                                 .def	r = r22					; Remander for div10
                                 
                                 .equ	LCDLine1 = $80			; LCD Line 1 select command
                                 .equ	LCDLine2 = $c0			; LCD Line 2 select command
                                 .equ	LCDClear = $01			; LCD Clear Command
                                 .equ	LCDHome = $02			; LCD Set Cursor Home Command
                                 .equ	LCDPulse = $08			; LCD Pulse signal, used to simulate 
                                 								; write signal
                                 
                                 .equ	LCDCmd = $00			; Constant used to write a command 
                                 .equ	LCDTxt = $01			; Constant used to write a text character
                                 
                                 .equ	LCDMaxCnt = 16			; Maximum number of characters per line
                                 .equ	LCDLn1Addr = $0100		; Beginning address for Line 1 data
                                 .equ	LCDLn2Addr = $0110		; Beginning address for Line 2 data
                                 
                                 ;-----------------------------------------------------------
                                 ;***********************************************************
                                 ;*	Public LCD Driver Suboutines and Functions
                                 ;*		These functions and subroutines can be called safely 
                                 ;*		from within any program
                                 ;***********************************************************
                                 ;-----------------------------------------------------------
                                 
                                 
                                 ;*******************************************************
                                 ;* SubRt: 	LCDInit
                                 ;* Desc: 	Initialize the Serial Port and the Hitachi 
                                 ;*			Display 8 Bit inc DD-RAM 
                                 ;*			Pointer with no features
                                 ;*			- 2 LInes with 16 characters
                                 ;*******************************************************
                                 LCDInit:
0003cf 930f                      		push	mpr				; Save the state of machine
0003d0 b70f                      		in		mpr, SREG		; Save the SREG
0003d1 930f                      		push	mpr				;
0003d2 931f                      		push	wait			; Save wait
                                 
                                 		; Setup the Communication Ports
                                 		; Port B: Output
                                 		; Port D: Input w/ internal pullup resistors
                                 		; Port F: Output on Pin 3
0003d3 e000                      		ldi		mpr, $00		; Initialize Port B for outputs
0003d4 bb08                      		out		PORTB, mpr		; Port B outputs high
0003d5 ef0f                      		ldi		mpr, $ff		; except for any overrides
0003d6 bb07                      		out		DDRB, mpr		;
0003d7 e000                      		ldi		mpr, $00		; Initialize Port D for inputs
0003d8 bb02                      		out		PORTD, mpr		; with Tri-State
0003d9 e000                      		ldi		mpr, $00		; except for any overrides
0003da bb01                      		out		DDRD, mpr		;
0003db e000                      		ldi		mpr, $00		; Initialize Port F Pin 3 to
0003dc 9300 0062                 		sts		PORTF, mpr		; output inorder to twiddle the
0003de e008                      		ldi		mpr, (1<<DDF3)	; LCD interface
0003df 9300 0061                 		sts		DDRF, mpr		; Must NOT override this port
                                 
                                 		; Setup the Serial Functionality
                                 		; SPI Type: Master
                                 		; SPI Clock Rate: 2*1000.000 kHz
                                 		; SPI Clock Phase: Cycle Half
                                 		; SPI Clock Polarity: Low
                                 		; SPI Data Order: MSB First
0003e1 e500                      		ldi		mpr, (1<<SPE|1<<MSTR)
0003e2 b90d                      		out		SPCR, mpr		; Set Serial Port Control Register
0003e3 e001                      		ldi		mpr, (1<<SPI2X)
0003e4 b90e                      		out		SPSR, mpr		; Set Serial Port Status Register
                                 
                                 		; Setup External SRAM configuration
                                 		; $0460 - $7FFF / $8000 - $FFFF
                                 		; Lower page wait state(s): None
                                 		; Uppoer page wait state(s): 2r/w
0003e5 e800                      		ldi		mpr, (1<<SRE)	; 
0003e6 bf05                      		out		MCUCR, mpr		; Initialize MCUCR
0003e7 e402                      		ldi		mpr, (1<<SRL2|1<<SRW11)
0003e8 9300 006d                 		sts		XMCRA, mpr		; Initialize XMCRA
0003ea e800                      		ldi		mpr, (1<<XMBK)	;
0003eb 9300 006c                 		sts		XMCRB, mpr		; Initialize XMCRB
                                 		
                                 		; Initialize USART0
                                 		; Communication Parameter: 8 bit, 1 stop, No Parity
                                 		; USART0 Rx: On
                                 		; USART0 Tx: On
                                 		; USART0 Mode: Asynchronous
                                 		; USART0 Baudrate: 9600
0003ed e000                      		ldi		mpr, $00		;
0003ee b90b                      		out		UCSR0A, mpr		; Init UCSR0A
0003ef e108                      		ldi		mpr, (1<<RXEN0|1<<TXEN0)
0003f0 b90a                      		out		UCSR0B, mpr		; Init UCSR0B
0003f1 e006                      		ldi		mpr, (1<<UCSZ01|1<<UCSZ00)
0003f2 9300 0095                 		sts		UCSR0C, mpr		; Init UCSR0C
0003f4 e000                      		ldi		mpr, $00		;
0003f5 9300 0090                 		sts		UBRR0H, mpr		; Init UBRR0H
0003f7 e607                      		ldi		mpr, $67		;
0003f8 b909                      		out		UBRR0L, mpr		; Init UBRR0L
                                 
                                 		; Initialize the LCD Display
0003f9 e006                      		ldi		mpr, 6			;
                                 LCDINIT_L1:
0003fa ef1a                      		ldi		wait, 250		; 15ms of Display
0003fb d0bf                      		rcall	LCDWait			; Bootup wait
0003fc 950a                      		dec		mpr				;
0003fd f7e1                      		brne	LCDINIT_L1		;
                                 
0003fe e308                      		ldi		mpr, $38		; Display Mode set
0003ff d097                      		rcall 	LCDWriteCmd		; 
000400 e008                      		ldi		mpr, $08		; Display Off
000401 d095                      		rcall	LCDWriteCmd		;
000402 e001                      		ldi		mpr, $01		; Display Clear
000403 d093                      		rcall	LCDWriteCmd		;
000404 e006                      		ldi		mpr, $06		; Entry mode set
000405 d091                      		rcall	LCDWriteCmd		;
000406 e00c                      		ldi		mpr, $0c		; Display on
000407 d08f                      		rcall	LCDWriteCmd		;
000408 d028                      		rcall	LCDClr			; Clear display
                                 
000409 911f                      		pop		wait			; Restore wait
00040a 910f                      		pop		mpr				; Restore SREG
00040b bf0f                      		out		SREG, mpr		;
00040c 910f                      		pop		mpr				; Restore mpr
00040d 9508                      		ret						; Return from subroutine
                                 
                                 ;*******************************************************
                                 ;* Func:	LCDWrite
                                 ;* Desc:	Generic Write Function that writes both lines
                                 ;*			of text out to the LCD
                                 ;*			- Line 1 data is in address space $0100-$010F
                                 ;*			- Line 2 data is in address space $0110-$010F
                                 ;*******************************************************
                                 LCDWrite:
00040e d002                      		rcall LCDWrLn1			; Write Line 1
00040f d011                      		rcall LCDWrLn2			; Write Line 2
000410 9508                      		ret 					; Return from function
                                 
                                 ;*******************************************************
                                 ;* Func:	LCDWrLn1
                                 ;* Desc:	This function will write the first line of 
                                 ;*			data to the first line of the LCD Display
                                 ;*******************************************************
                                 LCDWrLn1:
000411 930f                      		push 	mpr				; Save mpr
000412 93ef                      		push	ZL				; Save Z pointer
000413 93ff                      		push	ZH				;
000414 932f                      		push	count			; Save the count register
000415 933f                      		push	line			; Save the line register
                                 								
000416 e0e0                      		ldi		ZL, low(LCDLn1Addr)
000417 e0f1                      		ldi		ZH, high(LCDLn1Addr)		 
000418 e830                      		ldi		line, LCDLine1	; Set LCD line to Line 1
000419 d06b                      		rcall	LCDSetLine		; Restart at the beginning of line 1
00041a d076                      		rcall	LCDWriteLine	; Write the line of text
                                 
00041b 913f                      		pop		line
00041c 912f                      		pop		count			; Restore the counter
00041d 91ff                      		pop		ZH				; Restore Z pointer
00041e 91ef                      		pop		ZL				;
00041f 910f                      		pop 	mpr				; Restore mpr
000420 9508                      		ret						; Return from function
                                 
                                 ;*******************************************************
                                 ;* Func:	LCDWrLn2
                                 ;* Desc:	This function will write the second line of 
                                 ;*			data to the second line of the LCD Display
                                 ;*******************************************************
                                 LCDWrLn2:
000421 930f                      		push 	mpr				; Save mpr
000422 93ef                      		push	ZL				; Save Z pointer
000423 93ff                      		push	ZH				;
000424 932f                      		push	count			; Save the count register
000425 933f                      		push	line			; Save the line register
                                 								
000426 e1e0                      		ldi		ZL, low(LCDLn2Addr)
000427 e0f1                      		ldi		ZH, high(LCDLn2Addr)		 
000428 ec30                      		ldi		line, LCDLine2	; Set LCD line to Line 2
000429 d05b                      		rcall	LCDSetLine		; Restart at the beginning of line 2
00042a d066                      		rcall	LCDWriteLine	; Write the line of text
                                 
00042b 913f                      		pop		line
00042c 912f                      		pop		count			; Restore the counter
00042d 91ff                      		pop		ZH				; Restore Z pointer
00042e 91ef                      		pop		ZL				;
00042f 910f                      		pop 	mpr				; Restore mpr
000430 9508                      		ret						; Return from function
                                 
                                 ;*******************************************************
                                 ;* Func:	LCDClr
                                 ;* Desc:	Generic Clear Subroutine that clears both 
                                 ;*			lines of the LCD and Data Memory storage area
                                 ;*******************************************************
                                 LCDClr:
000431 d002                      		rcall	LCDClrLn1		; Clear Line 1
000432 d011                      		rcall	LCDClrLn2		; Clear Line 2
000433 9508                      		ret						; Return from Subroutine
                                 
                                 ;*******************************************************
                                 ;* Func:	LCDClrLn1
                                 ;* Desc:	This subroutine will clear the first line of 
                                 ;*			the data and the first line of the LCD Display
                                 ;*******************************************************
                                 LCDClrLn1:
000434 930f                      		push	mpr				; Save mpr
000435 933f                      		push	line			; Save line register
000436 932f                      		push	count			; Save the count register
000437 93ef                      		push	ZL				; Save Z pointer
000438 93ff                      		push	ZH				;
                                 	
000439 e830                      		ldi		line, LCDline1	; Set Access to Line 1 of LCD
00043a d04a                      		rcall	LCDSetLine		; Set Z pointer to address of line 1 data
00043b e0e0                      		ldi		ZL, low(LCDLn1Addr)
00043c e0f1                      		ldi		ZH, high(LCDLn1Addr)
00043d d04c                      		rcall	LCDClrLine		; Call the Clear Line function
                                 
00043e 91ff                      		pop		ZH				; Restore Z pointer
00043f 91ef                      		pop		ZL				;
000440 912f                      		pop		count			; Restore the count register
000441 913f                      		pop		line			; Restore line register
000442 910f                      		pop		mpr				; Restore mpr
000443 9508                      		ret						; Return from Subroutine
                                 
                                 ;*******************************************************
                                 ;* Func:	LCDClrLn2
                                 ;* Desc:	This subroutine will clear the second line of 
                                 ;*			the data and the second line of the LCD Display
                                 ;*******************************************************
                                 LCDClrLn2:
000444 930f                      		push	mpr				; Save mpr
000445 933f                      		push	line			; Save line register
000446 932f                      		push	count			; Save the count register
000447 93ef                      		push	ZL				; Save Z pointer
000448 93ff                      		push	ZH				;
                                 	
000449 ec30                      		ldi		line, LCDline2	; Set Access to Line 2 of LCD
00044a d03a                      		rcall	LCDSetLine		; Set Z pointer to address of line 2 data
00044b e1e0                      		ldi		ZL, low(LCDLn2Addr)
00044c e0f1                      		ldi		ZH, high(LCDLn2Addr)
00044d d03c                      		rcall	LCDClrLine		; Call the Clear Line function
                                 
00044e 91ff                      		pop		ZH				; Restore Z pointer
00044f 91ef                      		pop		ZL				;
000450 912f                      		pop		count			; Restore the count register
000451 913f                      		pop		line			; Restore line register
000452 910f                      		pop		mpr				; Restore mpr
000453 9508                      		ret						; Return from Subroutine
                                 
                                 ;*******************************************************
                                 ;* Func:	LCDWriteByte
                                 ;* Desc:	This is a complex and low level function that
                                 ;*			allows any program to write any ASCII character
                                 ;*			(Byte) anywhere in the LCD Display.  There
                                 ;*			are several things that need to be initialized
                                 ;*			before this function is called:
                                 ;*		count - Holds the index value of the line to where
                                 ;*				the char is written, 0-15(39).  i.e. if 
                                 ;*				count has the value of 3, then the char is
                                 ;*				going to be written to the third element of
                                 ;*				the line.
                                 ;*		line  - Holds the line number that the char is going
                                 ;*				to be written to, (1 or 2).
                                 ;*		mpr	  - Contains the value of the ASCII character to 
                                 ;*				be written (0-255)
                                 ;*********************************************************
                                 LCDWriteByte:
000454 930f                      		push	mpr				; Save the mpr
000455 933f                      		push	line			; Save the line
000456 932f                      		push	count			; Save the count
                                 								; Preform sanity checks on count and line
000457 3228                      		cpi		count, 40		; Make sure count is within range
000458 f450                      		brsh	LCDWriteByte_3	; Do nothing and exit function
000459 3031                      		cpi		line, 1			; If (line == 1)
00045a f411                      		brne	LCDWriteByte_1	; 
00045b e830                      		ldi		line, LCDLine1	; Load line 1 base LCD Address
00045c c003                      		rjmp	LCDWriteByte_2	; Continue on with function
                                 LCDWriteByte_1:					
00045d 3032                      		cpi		line, 2			; If (line == 2)
00045e f421                      		brne	LCDWriteByte_3	; Do nothing and exit function
00045f ec30                      		ldi		line, LCDLine2	; Load line 2 base LCD Address
                                 
                                 LCDWriteByte_2:					; Write char to LCD
000460 0f32                      		add		line, count		; Set the correct LCD address
000461 d023                      		rcall	LCDSetLine		; Set the line address to LCD
000462 d042                      		rcall	LCDWriteChar	; Write Char to LCD Display		
                                 		
                                 LCDWriteByte_3:					; Exit Function
000463 912f                      		pop		count			; Restore the count
000464 913f                      		pop		line			; Restore the line
000465 910f                      		pop		mpr				; Restore the mpr
000466 9508                      		ret						; Return from function
                                 		 
                                 ;*******************************************************
                                 ;* Func:	Bin2ASCII
                                 ;* Desc:	Converts a binary number into an ASCII 
                                 ;*			text string equivalent. 
                                 ;*			- The binary number needs to be in the mpr
                                 ;*			- The Start Address of where the text will
                                 ;*			 	be placed needs to be in the X Register
                                 ;*			- The count of the characters created are 
                                 ;*				added to the count register
                                 ;*******************************************************
                                 Bin2ASCII:
000467 930f                      		push	mpr				; save mpr
000468 936f                      		push	r				; save r
000469 935f                      		push	q				; save q
00046a 93bf                      		push	XH				; save X-pointer
00046b 93af                      		push	XL				;
                                 
                                 		; Determine the range of mpr
00046c 3604                      		cpi		mpr, 100		; is mpr >= 100
00046d f018                      		brlo	B2A_1			; goto next check
00046e e023                      		ldi		count, 3		; Three chars are written
00046f 9613                      		adiw	XL, 3			; Increment X 3 address spaces
000470 c007                      		rjmp	B2A_3			; Continue with program
000471 300a                      B2A_1:	cpi		mpr, 10			; is mpr >= 10
000472 f018                      		brlo	B2A_2			; Continue with program
000473 e022                      		ldi		count, 2		; Two chars are written
000474 9612                      		adiw	XL, 2			; Increment X 2 address spaces
000475 c002                      		rjmp	B2A_3			; Continue with program
000476 9611                      B2A_2:	adiw	XL, 1			; Increment X 1 address space
000477 e021                      		ldi		count, 1 		; One char is written
                                 
                                 B2A_3:	;Do-While statement that converts Binary to ASCII
000478 d04a                      		rcall	div10			; Call the div10 function
000479 e300                      		ldi		mpr, '0'		; Set the base ASCII integer value
00047a 0f06                      		add		mpr, r			; Create the ASCII integer value
00047b 930e                      		st		-X, mpr			; Load ASCII value to memory
00047c 2f05                      		mov		mpr, q			; Set mpr to quotiant value
00047d 3000                      		cpi		mpr, 0			; does mpr == 0
00047e f7c9                      		brne	B2A_3			; do while (mpr != 0)
                                 
00047f 91af                      		pop		XL				; restore X-pointer
000480 91bf                      		pop		XH				;
000481 915f                      		pop 	q				; restore q
000482 916f                      		pop		r				; restore r
000483 910f                      		pop		mpr				; restore mpr
000484 9508                      		ret						; return from function
                                 
                                 ;-------------------------------------------------------
                                 ;*******************************************************
                                 ;* Private LCD Driver Functions and Subroutines
                                 ;*	NOTE: It is not recommended to call these functions
                                 ;*	      or subroutines, only call the Public ones.
                                 ;*******************************************************
                                 ;-------------------------------------------------------
                                 
                                 ;*******************************************************
                                 ;* Func:	LCDSetLine
                                 ;* Desc:	Change line to be written to 
                                 ;*******************************************************
                                 LCDSetLine:
000485 930f                      		push	mpr				; Save mpr
000486 2f03                      		mov		mpr,line		; Copy Command Data to mpr
000487 d00f                      		rcall	LCDWriteCmd		; Write the Command
000488 910f                      		pop		mpr				; Restore the mpr
000489 9508                      		ret						; Return from function
                                 
                                 ;*******************************************************
                                 ;* Func:	LCDClrLine
                                 ;* Desc:	Manually clears a single line within an LCD
                                 ;*			Display and Data Memory by writing 16 
                                 ;*			consecutive ASCII spaces $20 to both the LCD 
                                 ;*			and the memory.  The line to be cleared must
                                 ;*			first be set in the LCD and the Z pointer is
                                 ;*			pointing the first element in Data Memory
                                 ;*******************************************************
                                 LCDClrLine:
00048a e200                      		ldi		mpr, ' '		; The space char to be written
00048b e120                      		ldi		count, LCDMaxCnt; The character count
                                 LCDClrLine_1:
00048c 9301                      		st		Z+, mpr			; Clear data memory element
00048d d017                      		rcall	LCDWriteChar	; Clear LCD memory element
00048e 952a                      		dec		count			; Decrement the count
00048f f7e1                      		brne	LCDClrLine_1	; Continue untill all elements are cleared
000490 9508                      		ret						; Return from function
                                 
                                 ;*******************************************************
                                 ;* Func:	LCDWriteLine
                                 ;* Desc:	Writes a line of text to the LCD Display.
                                 ;*			This routine takes a data element pointed to
                                 ;*			by the Z-pointer and copies it to the LCD 
                                 ;*			Display for the duration of the line.  The
                                 ;*			line the Z-pointer must be set prior to the 
                                 ;*			function call.
                                 ;*******************************************************
                                 LCDWriteLine:
000491 e120                      		ldi		count, LCDMaxCnt; The character count
                                 LCDWriteLine_1:
000492 9101                      		ld		mpr, Z+			; Get the data element
000493 d011                      		rcall	LCDWriteChar	; Write element to LCD Display
000494 952a                      		dec		count			; Decrement the count
000495 f7e1                      		brne	LCDWriteLine_1	; Continue untill all elements are written
000496 9508                      		ret						; Return from function
                                 
                                 ;*******************************************************
                                 ;* Func:	LCDWriteCmd
                                 ;* Desc:	Write command that is in the mpr to LCD 
                                 ;*******************************************************
                                 LCDWriteCmd:
000497 934f                      		push	type			; Save type register
000498 931f                      		push	wait			; Save wait register
000499 e040                      		ldi		type, LCDCmd	; Set type to Command data
00049a d013                      		rcall	LCDWriteData	; Write data to LCD
00049b 930f                      		push	mpr				; Save mpr register
00049c e002                      		ldi		mpr, 2			; Wait approx. 4.1 ms
                                 LCDWC_L1:
00049d ec1d                      		ldi		wait, 205		; Wait 2050 us
00049e d01c                      		rcall	LCDWait			;
00049f 950a                      		dec		mpr				; The wait loop cont.
0004a0 f7e1                      		brne	LCDWC_L1		;
0004a1 910f                      		pop		mpr				; Restore mpr
0004a2 911f                      		pop		wait			; Restore wait register
0004a3 914f                      		pop		type			; Restore type register
0004a4 9508                      		ret						; Return from function
                                 
                                 ;*******************************************************
                                 ;* Func:	LCDWriteChar
                                 ;* Desc:	Write character data that is in the mpr
                                 ;*******************************************************
                                 LCDWriteChar:
0004a5 934f                      		push	type			; Save type register
0004a6 931f                      		push	wait			; Save the wait register
0004a7 e041                      		ldi		type, LCDTxt	; Set type to Text data
0004a8 d005                      		rcall	LCDWriteData	; Write data to LCD
0004a9 e110                      		ldi		wait, 16		; Delay 160 us
0004aa d010                      		rcall	LCDWait			;
0004ab 911f                      		pop		wait			; Restore wait register
0004ac 914f                      		pop		type			; Restore type register
0004ad 9508                      		ret						; Return from function
                                 
                                 ;*******************************************************
                                 ;* Func:	LCDWriteData
                                 ;* Desc:	Write data or command to LCD 
                                 ;*******************************************************
                                 LCDWriteData:
0004ae b94f                      		out		SPDR, type		; Send type to SP
0004af e012                      		ldi		wait, 2			; Wait 2 us
0004b0 d00a                      		rcall	LCDWait			; Call Wait function
0004b1 b90f                      		out		SPDR,mpr		; Send data to serial port
0004b2 e012                      		ldi		wait, 2			; Wait 2 us
0004b3 d007                      		rcall	LCDWait			; Call Wait function
0004b4 e018                      		ldi		wait, LCDPulse	; Use wait temporarially to 
0004b5 9310 0062                 		sts		PORTF, wait		; to send write pulse to LCD
0004b7 e010                      		ldi		wait, $00		;
0004b8 9310 0062                 		sts		PORTF, wait		;
0004ba 9508                      		ret						; Return from function
                                 
                                 ;*******************************************************
                                 ;* Func:	LCDWait
                                 ;* Desc:	A wait loop that is 10 + 159*wait cycles or
                                 ;*			roughly wait*10us.  Just initialize wait
                                 ;*			for the specific amount of time in 10us 
                                 ;*			intervals.
                                 ;*******************************************************
0004bb 930f                      LCDWait:push	mpr				; Save mpr
0004bc e409                      LCDW_L1:ldi		mpr, $49		; Load with a 10us value
0004bd 950a                      LCDW_L2:dec		mpr				; Inner Wait Loop
0004be f7f1                      		brne	LCDW_L2
0004bf 951a                      		dec		wait			; Outer Wait Loop
0004c0 f7d9                      		brne	LCDW_L1
0004c1 910f                      		pop		mpr				; Restore mpr
0004c2 9508                      		ret						; Return from Wait Function
                                 
                                 ;*******************************************************
                                 ;*	Bin2ASCII routines that can be used as a psuedo-
                                 ;*			printf function to convert an 8-bit binary
                                 ;*			number into the unigned decimal ASCII text
                                 ;*******************************************************
                                 
                                 ;***********************************************************
                                 ;* Func:	div10
                                 ;* Desc:	Divides the value in the mpr by 10 and 
                                 ;*			puts the remander in the 'r' register and
                                 ;*			and the quotiant in the 'q' register.
                                 ;*	DO NOT modify this function, trust me, it does
                                 ;*	divide by 10 :)  ~DZ		
                                 ;***********************************************************
                                 div10:
0004c3 920f                      		push	r0				; Save register
                                 
                                 		; q = mpr / 10 = mpr * 0.000110011001101b
0004c4 2f50                      		mov		q, mpr			; q = mpr * 1.0b
0004c5 9556                      		lsr		q				; q >> 2
0004c6 9556                      		lsr		q				; q = mpr * 0.01b
0004c7 0f50                      		add		q, mpr			; q = (q + mpr) >> 1
0004c8 9556                      		lsr		q				; q = mpr * 0.101b
0004c9 0f50                      		add		q, mpr			; q = (q + mpr) >> 3
0004ca 9556                      		lsr		q
0004cb 9556                      		lsr		q
0004cc 9556                      		lsr		q				; q = mpr * 0.001101b
0004cd 0f50                      		add		q, mpr			; q = (q + mpr) >> 1
0004ce 9556                      		lsr		q				; q = mpr * 0.1001101b
0004cf 0f50                      		add		q, mpr			; q = (q + mpr) >> 3
0004d0 9556                      		lsr		q				
0004d1 9556                      		lsr		q
0004d2 9556                      		lsr		q				; q = mpr * 0.0011001101b
0004d3 0f50                      		add		q, mpr			; q = (q + mpr) >> 1
0004d4 9556                      		lsr		q				; q = mpr * 0.10011001101b
0004d5 0f50                      		add		q, mpr			; q = (q + mpr) >> 4
0004d6 9556                      		lsr		q
0004d7 9556                      		lsr		q
0004d8 9556                      		lsr		q
0004d9 9556                      		lsr		q				; q = mpr * 0.000110011001101b
                                 
                                 		; compute the remainder as r = i - 10 * q
                                 		; calculate r = q * 10 = q * 1010b
0004da 2f65                      		mov		r, q			; r = q * 1
0004db 0f66                      		lsl		r				; r << 2
0004dc 0f66                      		lsl		r				; r = q * 100b
0004dd 0f65                      		add		r, q			; r = (r + q) << 1
0004de 0f66                      		lsl		r				; r = q * 1010b
0004df 2e06                      		mov		r0, r			; r0 = 10 * q
0004e0 2f60                      		mov		r, mpr			; r = mpr
0004e1 1960                      		sub		r, r0			; r = mpr - 10 * q
                                 
                                 		; Fix any errors that occur
0004e2 306a                      div10_1:cpi		r, 10			; Compare with 10
0004e3 f018                      		brlo	div10_2			; do nothing if r < 10
0004e4 9553                      		inc		q				; fix qoutient
0004e5 506a                      		subi	r, 10			; fix remainder
0004e6 cffb                      		rjmp	div10_1			; Continue until error is corrected
                                 
0004e7 900f                      div10_2:pop		r0				; Restore registers
0004e8 9508                      		ret						; Return from function


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega128" register use summary:
x  :   3 y  :   5 z  :   4 r0 :   4 r1 :   0 r2 :   1 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   8 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16: 217 r17:  31 r18:  33 r19:  29 r20:  12 
r21:  38 r22:  17 r23:  18 r24:  18 r25:  24 r26:  16 r27:  13 r28:  21 
r29:  17 r30:  25 r31:  25 
Registers used: 22 out of 35 (62.9%)

"ATmega128" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :  13 adiw  :   3 and   :   0 
andi  :   4 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :  69 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   3 brlt  :   0 brmi  :   0 
brne  :  70 brpl  :   0 brsh  :   1 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   0 cbi   :  16 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :   1 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   7 cpc   :   0 
cpi   :  66 cpse  :   0 dec   :  16 elpm  :   0 eor   :   0 fmul  :   0 
fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :  11 inc   :   5 
jmp   :   0 ld    :   3 ldd   :   0 ldi   : 135 lds   :   0 lpm   :   2 
lsl   :   3 lsr   :  15 mov   :  20 movw  :   0 mul   :   0 muls  :   0 
mulsu :   0 neg   :   0 nop   :   1 or    :   0 ori   :   0 out   :  40 
pop   :  80 push  :  80 rcall : 275 ret   :  32 reti  :   0 rjmp  : 128 
rol   :   0 ror   :   0 sbc   :   0 sbci  :   0 sbi   :  34 sbic  :   0 
sbis  :   0 sbiw  :   0 sbr   :   0 sbrc  :   0 sbrs  :   5 sec   :   0 
seh   :   0 sei   :   0 sen   :   0 ser   :   0 ses   :   0 set   :   0 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :   7 std   :   0 
sts   :   8 sub   :   1 subi  :   1 swap  :   0 tst   :   0 wdr   :   0 

Instructions used: 33 out of 114 (28.9%)

"ATmega128" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0009d2   2326     50   2376  131072   1.8%
[.dseg] 0x000100 0x00031a      0     28     28    4096   0.7%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 0 warnings
